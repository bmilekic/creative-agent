[project]
name = "adcp-creative-agent"
version = "0.1.0"
description = "AdCP Creative Agent - stateless MCP server for creative formats"
readme = "README.md"
requires-python = ">=3.12"

dependencies = [
    "fastmcp>=2.11.0",
    "google-genai>=1.0.0",
    "pillow>=10.0.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "httpx>=0.28.1",
    "pydantic>=2.0.0",
    "boto3>=1.35.0",
]

[project.scripts]
adcp-creative-agent = "creative_agent.server:mcp.run"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/creative_agent"]

[tool.uv]
package = true

[dependency-groups]
dev = [
    "mypy>=1.18.2",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "ruff>=0.8.0",
    # Type stubs
    "boto3-stubs[s3]>=1.35.0",
    "types-pillow>=10.0.0",
]

[tool.ruff]
line-length = 120
target-version = "py312"
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".venv",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ANN",  # flake8-annotations (type hints)
    "ASYNC",# flake8-async
    "S",    # flake8-bandit (security)
    "BLE",  # flake8-blind-except
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "ISC",  # flake8-implicit-str-concat
    "PIE",  # flake8-pie
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate (commented code)
    "PL",   # pylint
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",    # line too long (handled by formatter)
    "ANN101",  # missing-type-self (deprecated)
    "ANN102",  # missing-type-cls (deprecated)
    "ANN401",  # any-type (sometimes necessary)
    "COM812",  # trailing comma (conflicts with formatter)
    "ISC001",  # implicit str concat (conflicts with formatter)
    "BLE001",  # blind except (acceptable for tool error handling)
    "S104",    # hardcoded bind all interfaces (required for production deployment)
    "A002",    # argument shadows builtin (type parameter name is intentional)
    "PLR0911", # too many return statements (acceptable for validation logic)
    "PLR0912", # too many branches (acceptable for complex generation logic)
    "PLR0913", # too many arguments (acceptable for MCP tool signatures)
    "PLR0915", # too many statements (acceptable for generation logic)
    "PLR2004", # magic value (acceptable for dimension parsing)
    "PLC0415", # import outside top-level (acceptable for lazy imports)
    "SIM108",  # ternary operator (if-else is more readable)
    "SIM102",  # nested if (nested is more readable)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",    # assert used (normal in tests)
    "ANN",     # type annotations (less strict in tests)
    "PLR2004", # magic values (ok in tests)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
