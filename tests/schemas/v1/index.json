{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "/schemas/v1/index.json",
  "title": "AdCP Schema Registry v1",
  "version": "1.0.0",
  "description": "Registry of all AdCP JSON schemas for validation and discovery",
  "adcp_version": "1.6.1",
  "standard_formats_version": "1.0.0",
  "versioning": {
    "note": "All request/response schemas include adcp_version field. Compatibility follows semantic versioning rules."
  },
  "lastUpdated": "2025-10-04",
  "baseUrl": "/schemas/v1",
  "schemas": {
    "core": {
      "description": "Core data models used throughout AdCP",
      "schemas": {
        "product": {
          "$ref": "/schemas/v1/core/product.json",
          "description": "Represents available advertising inventory"
        },
        "media-buy": {
          "$ref": "/schemas/v1/core/media-buy.json",
          "description": "Represents a purchased advertising campaign"
        },
        "package": {
          "$ref": "/schemas/v1/core/package.json",
          "description": "A specific product within a media buy (line item)"
        },
        "creative-asset": {
          "$ref": "/schemas/v1/core/creative-asset.json",
          "description": "Creative asset for upload to library - supports both hosted assets and third-party snippets"
        },
        "targeting": {
          "$ref": "/schemas/v1/core/targeting.json",
          "description": "Audience targeting criteria"
        },
        "budget": {
          "$ref": "/schemas/v1/core/budget.json",
          "description": "Budget configuration for a media buy or package"
        },
        "frequency-cap": {
          "$ref": "/schemas/v1/core/frequency-cap.json",
          "description": "Frequency capping settings"
        },
        "format": {
          "$ref": "/schemas/v1/core/format.json",
          "description": "Represents a creative format with its requirements"
        },
        "measurement": {
          "$ref": "/schemas/v1/core/measurement.json",
          "description": "Measurement capabilities included with a product"
        },
        "creative-policy": {
          "$ref": "/schemas/v1/core/creative-policy.json",
          "description": "Creative requirements and restrictions for a product"
        },
        "response": {
          "$ref": "/schemas/v1/core/response.json",
          "description": "Standard response structure (MCP)"
        },
        "error": {
          "$ref": "/schemas/v1/core/error.json",
          "description": "Standard error structure"
        },
        "sub-asset": {
          "$ref": "/schemas/v1/core/sub-asset.json",
          "description": "Sub-asset for multi-asset creative formats"
        },
        "creative-assignment": {
          "$ref": "/schemas/v1/core/creative-assignment.json",
          "description": "Assignment of a creative asset to a package"
        },
        "creative-library-item": {
          "$ref": "/schemas/v1/core/creative-library-item.json",
          "description": "Creative asset as it appears in the centralized library"
        },
        "performance-feedback": {
          "$ref": "/schemas/v1/core/performance-feedback.json",
          "description": "Performance feedback data for a media buy or package"
        },
        "property": {
          "$ref": "/schemas/v1/core/property.json",
          "description": "An advertising property that can be validated via adagents.json"
        }
      }
    },
    "enums": {
      "description": "Enumerated types and constants",
      "schemas": {
        "delivery-type": {
          "$ref": "/schemas/v1/enums/delivery-type.json",
          "description": "Type of inventory delivery"
        },
        "media-buy-status": {
          "$ref": "/schemas/v1/enums/media-buy-status.json",
          "description": "Status of a media buy"
        },
        "package-status": {
          "$ref": "/schemas/v1/enums/package-status.json",
          "description": "Status of a package"
        },
        "creative-status": {
          "$ref": "/schemas/v1/enums/creative-status.json",
          "description": "Status of a creative asset"
        },
        "pacing": {
          "$ref": "/schemas/v1/enums/pacing.json",
          "description": "Budget pacing strategy"
        },
        "frequency-cap-scope": {
          "$ref": "/schemas/v1/enums/frequency-cap-scope.json",
          "description": "Scope for frequency cap application"
        },
        "standard-format-ids": {
          "$ref": "/schemas/v1/enums/standard-format-ids.json",
          "description": "Enumeration of all standard creative format identifiers"
        },
        "snippet-type": {
          "$ref": "/schemas/v1/enums/snippet-type.json",
          "description": "Types of third-party creative snippets (VAST, HTML, JavaScript, etc.)"
        },
        "identifier-types": {
          "$ref": "/schemas/v1/enums/identifier-types.json",
          "description": "Valid identifier types for property identification across different media types"
        },
        "task-status": {
          "$ref": "/schemas/v1/enums/task-status.json",
          "description": "Standardized task status values based on A2A TaskState enum"
        }
      }
    },
    "media-buy": {
      "description": "Media buy task request/response schemas",
      "supporting-schemas": {
        "package-request": {
          "$ref": "/schemas/v1/media-buy/package-request.json",
          "description": "Package configuration for media buy creation - used within create_media_buy request"
        }
      },
      "tasks": {
        "get-products": {
          "request": {
            "$ref": "/schemas/v1/media-buy/get-products-request.json",
            "description": "Request parameters for discovering available advertising products"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/get-products-response.json",
            "description": "Response payload for get_products task"
          }
        },
        "list-creative-formats": {
          "request": {
            "$ref": "/schemas/v1/media-buy/list-creative-formats-request.json",
            "description": "Request parameters for discovering supported creative formats"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/list-creative-formats-response.json",
            "description": "Response payload for list_creative_formats task"
          }
        },
        "create-media-buy": {
          "request": {
            "$ref": "/schemas/v1/media-buy/create-media-buy-request.json",
            "description": "Request parameters for creating a media buy"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/create-media-buy-response.json",
            "description": "Response payload for create_media_buy task"
          }
        },
        "sync-creatives": {
          "request": {
            "$ref": "/schemas/v1/media-buy/sync-creatives-request.json",
            "description": "Request parameters for syncing creative assets with upsert semantics"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/sync-creatives-response.json",
            "description": "Response payload for sync_creatives task"
          }
        },
        "list-creatives": {
          "request": {
            "$ref": "/schemas/v1/media-buy/list-creatives-request.json",
            "description": "Request parameters for querying creative library with filtering and pagination"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/list-creatives-response.json",
            "description": "Response payload for list_creatives task"
          }
        },
        "update-media-buy": {
          "request": {
            "$ref": "/schemas/v1/media-buy/update-media-buy-request.json",
            "description": "Request parameters for updating campaign and package settings"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/update-media-buy-response.json",
            "description": "Response payload for update_media_buy task"
          }
        },
        "get-media-buy-delivery": {
          "request": {
            "$ref": "/schemas/v1/media-buy/get-media-buy-delivery-request.json",
            "description": "Request parameters for retrieving comprehensive delivery metrics"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/get-media-buy-delivery-response.json",
            "description": "Response payload for get_media_buy_delivery task"
          }
        },
        "list-authorized-properties": {
          "request": {
            "$ref": "/schemas/v1/media-buy/list-authorized-properties-request.json",
            "description": "Request parameters for discovering all properties this agent is authorized to represent"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/list-authorized-properties-response.json",
            "description": "Response payload for list_authorized_properties task"
          }
        },
        "provide-performance-feedback": {
          "request": {
            "$ref": "/schemas/v1/media-buy/provide-performance-feedback-request.json",
            "description": "Request parameters for sharing performance outcomes with publishers"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/provide-performance-feedback-response.json",
            "description": "Response payload for provide_performance_feedback task"
          }
        },
        "build-creative": {
          "request": {
            "$ref": "/schemas/v1/media-buy/build-creative-request.json",
            "description": "Request parameters for AI-powered creative generation"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/build-creative-response.json",
            "description": "Response payload for build_creative task"
          }
        },
        "manage-creative-library": {
          "request": {
            "$ref": "/schemas/v1/media-buy/manage-creative-library-request.json",
            "description": "Request parameters for managing creative library assets"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/manage-creative-library-response.json",
            "description": "Response payload for manage_creative_library task"
          }
        }
      }
    },
    "signals": {
      "description": "Signals protocol task request/response schemas",
      "tasks": {
        "get-signals": {
          "request": {
            "$ref": "/schemas/v1/signals/get-signals-request.json",
            "description": "Request parameters for discovering signals based on description"
          },
          "response": {
            "$ref": "/schemas/v1/signals/get-signals-response.json",
            "description": "Response payload for get_signals task"
          }
        },
        "activate-signal": {
          "request": {
            "$ref": "/schemas/v1/signals/activate-signal-request.json",
            "description": "Request parameters for activating a signal on a specific platform/account"
          },
          "response": {
            "$ref": "/schemas/v1/signals/activate-signal-response.json",
            "description": "Response payload for activate_signal task"
          }
        }
      }
    },
    "adagents": {
      "description": "Authorized sales agents file format specification",
      "$ref": "/schemas/v1/adagents.json",
      "file_location": "/.well-known/adagents.json",
      "purpose": "Declares which sales agents are authorized to sell a publisher's advertising inventory"
    },
    "standard-formats": {
      "description": "Standard creative formats registry and schemas",
      "$ref": "/schemas/v1/standard-formats/index.json",
      "asset_types": {
        "$ref": "/schemas/v1/standard-formats/asset-types/index.json",
        "description": "Standardized asset type definitions"
      }
    }
  },
  "usage": {
    "validation": "Use these schemas to validate AdCP requests and responses",
    "codeGeneration": "Generate client SDKs using these schemas",
    "documentation": "Reference schemas for API documentation",
    "testing": "Validate test fixtures and examples"
  },
  "examples": [
    {
      "language": "javascript",
      "description": "JavaScript validation example",
      "code": "const Ajv = require('ajv'); const ajv = new Ajv(); const schema = require('./schemas/v1/core/product.json'); const validate = ajv.compile(schema);"
    },
    {
      "language": "python",
      "description": "Python validation example",
      "code": "import jsonschema; schema = {...}; jsonschema.validate(data, schema)"
    },
    {
      "language": "java",
      "description": "Java validation example",
      "code": "// Use everit-org/json-schema or similar library"
    }
  ]
}
