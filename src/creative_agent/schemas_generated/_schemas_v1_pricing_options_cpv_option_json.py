# generated by datamodel-codegen:
#   filename:  _schemas_v1_pricing-options_cpv-option_json.json

from __future__ import annotations

from typing import Annotated, Literal, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class ViewThreshold(RootModel[float]):
    root: Annotated[
        float,
        Field(
            description="Percentage completion threshold for CPV pricing (0.0 to 1.0, e.g., 0.5 = 50% completion)",
            ge=0.0,
            le=1.0,
        ),
    ]


class ViewThreshold11(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    duration_seconds: Annotated[
        int,
        Field(
            description="Seconds of viewing required (e.g., 30 for YouTube-style '30 seconds = view')",
            ge=1,
        ),
    ]


class Parameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    view_threshold: Union[ViewThreshold, ViewThreshold11]


class CpvPricingOption(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpv_usd_50pct')"
        ),
    ]
    pricing_model: Annotated[
        Literal["cpv"], Field(description="Cost per view at threshold")
    ]
    rate: Annotated[float, Field(description="Fixed CPV rate (cost per view)", ge=0.0)]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    parameters: Annotated[
        Parameters,
        Field(description="CPV-specific parameters defining the view threshold"),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None
