# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_list-creatives-request_json.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Optional

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class Status(Enum):
    processing = "processing"
    approved = "approved"
    rejected = "rejected"
    pending_review = "pending_review"


class SnippetType(Enum):
    vast_xml = "vast_xml"
    vast_url = "vast_url"
    html = "html"
    javascript = "javascript"
    iframe = "iframe"
    daast_url = "daast_url"


class Filters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    format: Annotated[
        Optional[str],
        Field(
            description="Filter by creative format type (e.g., video, audio, display)"
        ),
    ] = None
    formats: Annotated[
        Optional[list[str]],
        Field(description="Filter by multiple creative format types"),
    ] = None
    status: Annotated[
        Optional[Status],
        Field(description="Status of a creative asset", title="Creative Status"),
    ] = None
    statuses: Annotated[
        Optional[list[Any]], Field(description="Filter by multiple creative statuses")
    ] = None
    tags: Annotated[
        Optional[list[str]],
        Field(description="Filter by creative tags (all tags must match)"),
    ] = None
    tags_any: Annotated[
        Optional[list[str]],
        Field(description="Filter by creative tags (any tag must match)"),
    ] = None
    name_contains: Annotated[
        Optional[str],
        Field(
            description="Filter by creative names containing this text (case-insensitive)"
        ),
    ] = None
    creative_ids: Annotated[
        Optional[list[str]],
        Field(description="Filter by specific creative IDs", max_length=100),
    ] = None
    created_after: Annotated[
        Optional[AwareDatetime],
        Field(description="Filter creatives created after this date (ISO 8601)"),
    ] = None
    created_before: Annotated[
        Optional[AwareDatetime],
        Field(description="Filter creatives created before this date (ISO 8601)"),
    ] = None
    updated_after: Annotated[
        Optional[AwareDatetime],
        Field(description="Filter creatives last updated after this date (ISO 8601)"),
    ] = None
    updated_before: Annotated[
        Optional[AwareDatetime],
        Field(description="Filter creatives last updated before this date (ISO 8601)"),
    ] = None
    assigned_to_package: Annotated[
        Optional[str],
        Field(description="Filter creatives assigned to this specific package"),
    ] = None
    assigned_to_packages: Annotated[
        Optional[list[str]],
        Field(description="Filter creatives assigned to any of these packages"),
    ] = None
    unassigned: Annotated[
        Optional[bool],
        Field(
            description="Filter for unassigned creatives when true, assigned creatives when false"
        ),
    ] = None
    snippet_type: Annotated[
        Optional[SnippetType],
        Field(
            description="Types of third-party creative snippets supported by AdCP",
            examples=[
                {
                    "type": "vast_xml",
                    "description": "Inline VAST XML",
                    "snippet": '<VAST version="3.0"><Ad><InLine><AdTitle>Sample Ad</AdTitle>...</InLine></Ad></VAST>',
                },
                {
                    "type": "vast_url",
                    "description": "VAST endpoint URL",
                    "snippet": "https://ads.example.com/vast?campaign=12345&placement=video",
                },
                {
                    "type": "html",
                    "description": "HTML display ad",
                    "snippet": '<div style="width:300px;height:250px"><img src="banner.jpg" alt="Ad"/></div>',
                },
                {
                    "type": "javascript",
                    "description": "JavaScript ad tag",
                    "snippet": '<script type="text/javascript" src="https://ads.example.com/tag.js"></script>',
                },
                {
                    "type": "iframe",
                    "description": "iFrame ad tag",
                    "snippet": '<iframe src="https://ads.example.com/creative" width="300" height="250"></iframe>',
                },
                {
                    "type": "daast_url",
                    "description": "DAAST audio ad URL",
                    "snippet": "https://audio-ads.example.com/daast?campaign=audio123",
                },
            ],
            title="Snippet Type",
        ),
    ] = None
    has_performance_data: Annotated[
        Optional[bool],
        Field(description="Filter creatives that have performance data when true"),
    ] = None


class FieldModel(Enum):
    created_date = "created_date"
    updated_date = "updated_date"
    name = "name"
    status = "status"
    assignment_count = "assignment_count"
    performance_score = "performance_score"


class Direction(Enum):
    asc = "asc"
    desc = "desc"


class Sort(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    field: Annotated[Optional[FieldModel], Field(description="Field to sort by")] = (
        "created_date"
    )
    direction: Annotated[Optional[Direction], Field(description="Sort direction")] = (
        "desc"
    )


class Pagination(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    limit: Annotated[
        Optional[int],
        Field(description="Maximum number of creatives to return", ge=1, le=100),
    ] = 50
    offset: Annotated[
        Optional[int], Field(description="Number of creatives to skip", ge=0)
    ] = 0


class Field1(Enum):
    creative_id = "creative_id"
    name = "name"
    format = "format"
    status = "status"
    created_date = "created_date"
    updated_date = "updated_date"
    tags = "tags"
    assignments = "assignments"
    performance = "performance"
    sub_assets = "sub_assets"


class ListCreativesRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    adcp_version: Annotated[
        Optional[str],
        Field(
            description="AdCP schema version for this request",
            pattern="^\\d+\\.\\d+\\.\\d+$",
        ),
    ] = "1.6.0"
    filters: Annotated[
        Optional[Filters], Field(description="Filter criteria for querying creatives")
    ] = None
    sort: Annotated[Optional[Sort], Field(description="Sorting parameters")] = None
    pagination: Annotated[
        Optional[Pagination], Field(description="Pagination parameters")
    ] = None
    include_assignments: Annotated[
        Optional[bool],
        Field(description="Include package assignment information in response"),
    ] = True
    include_performance: Annotated[
        Optional[bool],
        Field(description="Include aggregated performance metrics in response"),
    ] = False
    include_sub_assets: Annotated[
        Optional[bool],
        Field(
            description="Include sub-assets (for carousel/native formats) in response"
        ),
    ] = False
    fields: Annotated[
        Optional[list[Field1]],
        Field(
            description="Specific fields to include in response (omit for all fields)"
        ),
    ] = None
