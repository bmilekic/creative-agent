# generated by datamodel-codegen:
#   filename:  _schemas_v1_creative_preview-creative-request_json.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Literal, Optional, Union

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, EmailStr, Field


class FormatId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    agent_url: Annotated[
        AnyUrl,
        Field(
            description="URL of the agent that defines this format (e.g., 'https://creatives.adcontextprotocol.org' for standard formats, or 'https://publisher.com/.well-known/adcp/sales' for custom formats)"
        ),
    ]
    id: Annotated[
        str,
        Field(
            description="Format identifier within the agent's namespace (e.g., 'display_300x250', 'video_standard_30s')",
            pattern="^[a-zA-Z0-9_-]+$",
        ),
    ]


class Format(Enum):
    jpg = "jpg"
    jpeg = "jpeg"
    png = "png"
    gif = "gif"
    webp = "webp"
    svg = "svg"


class Assets(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["image"]
    url: Annotated[AnyUrl, Field(description="URL to hosted image asset")]
    width: Annotated[int, Field(description="Image width in pixels", ge=1)]
    height: Annotated[int, Field(description="Image height in pixels", ge=1)]
    format: Annotated[Optional[Format], Field(description="Image file format")] = None
    file_size: Annotated[
        Optional[int], Field(description="File size in bytes", ge=0)
    ] = None
    alt: Annotated[
        Optional[str], Field(description="Alternative text for accessibility")
    ] = None


class Format6(Enum):
    mp4 = "mp4"
    webm = "webm"
    mov = "mov"


class Codec(Enum):
    h264 = "h264"
    h265 = "h265"
    vp8 = "vp8"
    vp9 = "vp9"
    av1 = "av1"


class Assets27(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["video"]
    url: Annotated[AnyUrl, Field(description="URL to hosted video asset")]
    width: Annotated[int, Field(description="Video width in pixels", ge=1)]
    height: Annotated[int, Field(description="Video height in pixels", ge=1)]
    duration_seconds: Annotated[
        float, Field(description="Video duration in seconds", ge=0.0)
    ]
    format: Annotated[
        Optional[Format6], Field(description="Video container format")
    ] = None
    codec: Annotated[Optional[Codec], Field(description="Video codec")] = None
    bitrate_mbps: Annotated[
        Optional[float], Field(description="Video bitrate in Mbps", ge=0.0)
    ] = None
    file_size: Annotated[
        Optional[int], Field(description="File size in bytes", ge=0)
    ] = None
    aspect_ratio: Annotated[
        Optional[str],
        Field(description="Aspect ratio (e.g., '16:9', '9:16')", pattern="^\\d+:\\d+$"),
    ] = None


class Format7(Enum):
    mp3 = "mp3"
    aac = "aac"
    m4a = "m4a"
    wav = "wav"
    ogg = "ogg"


class Codec3(Enum):
    mp3 = "mp3"
    aac = "aac"
    opus = "opus"
    vorbis = "vorbis"


class SampleRateHz(Enum):
    integer_22050 = 22050
    integer_44100 = 44100
    integer_48000 = 48000
    integer_96000 = 96000


class Channels(Enum):
    mono = "mono"
    stereo = "stereo"
    field_5_1 = "5.1"
    field_7_1 = "7.1"


class Assets28(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["audio"]
    url: Annotated[AnyUrl, Field(description="URL to hosted audio asset")]
    duration_seconds: Annotated[
        float, Field(description="Audio duration in seconds", ge=0.0)
    ]
    format: Annotated[Optional[Format7], Field(description="Audio file format")] = None
    codec: Annotated[Optional[Codec3], Field(description="Audio codec")] = None
    bitrate_kbps: Annotated[
        Optional[float], Field(description="Audio bitrate in Kbps", ge=0.0)
    ] = None
    sample_rate_hz: Annotated[
        Optional[SampleRateHz], Field(description="Sample rate in Hz")
    ] = None
    channels: Annotated[
        Optional[Channels], Field(description="Audio channel configuration")
    ] = None
    file_size: Annotated[
        Optional[int], Field(description="File size in bytes", ge=0)
    ] = None


class VastVersion(Enum):
    field_2_0 = "2.0"
    field_3_0 = "3.0"
    field_4_0 = "4.0"
    field_4_1 = "4.1"
    field_4_2 = "4.2"


class Assets29(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["vast_tag"]
    content: Annotated[str, Field(description="Complete VAST XML content")]
    vast_version: Annotated[
        VastVersion, Field(description="VAST specification version")
    ]
    vpaid_enabled: Annotated[
        Optional[bool], Field(description="Whether VPAID is used")
    ] = None
    duration_seconds: Annotated[
        Optional[float], Field(description="Expected video duration in seconds", ge=0.0)
    ] = None


class Format8(Enum):
    plain = "plain"
    html = "html"
    markdown = "markdown"


class Assets30(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["text"]
    content: Annotated[str, Field(description="Text content")]
    length: Annotated[Optional[int], Field(description="Character count", ge=0)] = None
    format: Annotated[Optional[Format8], Field(description="Text format")] = "plain"


class Purpose(Enum):
    clickthrough = "clickthrough"
    landing_page = "landing_page"
    tracking_pixel = "tracking_pixel"
    impression_tracker = "impression_tracker"


class Assets31(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["url"]
    url: Annotated[AnyUrl, Field(description="The URL")]
    purpose: Annotated[Optional[Purpose], Field(description="Purpose of this URL")] = (
        None
    )


class Method(Enum):
    get = "GET"
    post = "POST"


class ResponseType(Enum):
    html = "html"
    json = "json"
    xml = "xml"
    javascript = "javascript"


class Method3(Enum):
    hmac_sha256 = "hmac_sha256"
    api_key = "api_key"
    none = "none"


class Security(BaseModel):
    method: Method3
    hmac_header: Optional[str] = None
    api_key_header: Optional[str] = None


class Assets32(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["webhook"]
    url: Annotated[AnyUrl, Field(description="Webhook URL to call for dynamic content")]
    method: Optional[Method] = "POST"
    timeout_ms: Annotated[Optional[int], Field(ge=10, le=5000)] = 500
    supported_macros: Annotated[
        Optional[list[str]],
        Field(description="Universal macros that can be passed to webhook"),
    ] = None
    required_macros: Annotated[
        Optional[list[str]], Field(description="Universal macros that must be provided")
    ] = None
    response_type: ResponseType
    security: Security
    fallback_required: Optional[bool] = True


class Assets33(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["html"]
    content: Annotated[str, Field(description="Complete HTML content")]
    url: Annotated[
        Optional[AnyUrl], Field(description="URL to externally hosted HTML file")
    ] = None
    width: Annotated[Optional[int], Field(description="Ad width in pixels", ge=1)] = (
        None
    )
    height: Annotated[Optional[int], Field(description="Ad height in pixels", ge=1)] = (
        None
    )
    file_size: Annotated[
        Optional[int], Field(description="Total file size in bytes", ge=0)
    ] = None


class Assets34(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["html"]
    content: Annotated[Optional[str], Field(description="Complete HTML content")] = None
    url: Annotated[AnyUrl, Field(description="URL to externally hosted HTML file")]
    width: Annotated[Optional[int], Field(description="Ad width in pixels", ge=1)] = (
        None
    )
    height: Annotated[Optional[int], Field(description="Ad height in pixels", ge=1)] = (
        None
    )
    file_size: Annotated[
        Optional[int], Field(description="Total file size in bytes", ge=0)
    ] = None


class Assets35(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["javascript"]
    content: Annotated[str, Field(description="JavaScript code content")]
    url: Annotated[
        Optional[AnyUrl], Field(description="URL to external JavaScript file")
    ] = None
    inline: Annotated[
        Optional[bool],
        Field(description="Whether code should be inlined vs external script tag"),
    ] = None


class Assets36(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["javascript"]
    content: Annotated[Optional[str], Field(description="JavaScript code content")] = (
        None
    )
    url: Annotated[AnyUrl, Field(description="URL to external JavaScript file")]
    inline: Annotated[
        Optional[bool],
        Field(description="Whether code should be inlined vs external script tag"),
    ] = None


class CreativeManifest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    format_id: Annotated[
        Any, Field(description="Circular reference to /schemas/v1/core/format-id.json")
    ]
    promoted_offering: Annotated[
        Optional[str],
        Field(
            description="Product name or offering being advertised. Maps to promoted_offerings in create_media_buy request to associate creative with the product being promoted."
        ),
    ] = None
    assets: Annotated[
        dict[
            str,
            Union[
                Assets,
                Assets27,
                Assets28,
                Assets29,
                Assets30,
                Assets31,
                Assets32,
                Union[Assets33, Assets34],
                Union[Assets35, Assets36],
            ],
        ],
        Field(
            description="Map of asset IDs to actual asset content. Each key MUST match an asset_id from the format's assets_required array (e.g., 'banner_image', 'clickthrough_url', 'video_file', 'vast_tag'). The asset_id is the technical identifier used to match assets to format requirements."
        ),
    ]


class Input(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[
        str,
        Field(
            description="Human-readable name for this input set (e.g., 'Sunny morning on mobile', 'Evening podcast ad', 'Desktop dark mode')"
        ),
    ]
    macros: Annotated[
        Optional[dict[str, str]],
        Field(
            description="Macro values to use for this preview. Supports all universal macros from the format's supported_macros list. See docs/media-buy/creatives/universal-macros.md for available macros."
        ),
    ] = None
    context_description: Annotated[
        Optional[str],
        Field(
            description="Natural language description of the context for AI-generated content (e.g., 'User just searched for running shoes', 'Podcast discussing weather patterns', 'Article about electric vehicles')"
        ),
    ] = None


class Logo(BaseModel):
    url: Annotated[AnyUrl, Field(description="URL to the logo asset")]
    tags: Annotated[
        Optional[list[str]],
        Field(
            description="Semantic tags describing the logo variant (e.g., 'dark', 'light', 'square', 'horizontal', 'icon')"
        ),
    ] = None
    width: Annotated[Optional[int], Field(description="Logo width in pixels")] = None
    height: Annotated[Optional[int], Field(description="Logo height in pixels")] = None


class Colors(BaseModel):
    primary: Annotated[
        Optional[str],
        Field(
            description="Primary brand color (hex format)", pattern="^#[0-9A-Fa-f]{6}$"
        ),
    ] = None
    secondary: Annotated[
        Optional[str],
        Field(
            description="Secondary brand color (hex format)",
            pattern="^#[0-9A-Fa-f]{6}$",
        ),
    ] = None
    accent: Annotated[
        Optional[str],
        Field(description="Accent color (hex format)", pattern="^#[0-9A-Fa-f]{6}$"),
    ] = None
    background: Annotated[
        Optional[str],
        Field(description="Background color (hex format)", pattern="^#[0-9A-Fa-f]{6}$"),
    ] = None
    text: Annotated[
        Optional[str],
        Field(description="Text color (hex format)", pattern="^#[0-9A-Fa-f]{6}$"),
    ] = None


class Fonts(BaseModel):
    primary: Annotated[Optional[str], Field(description="Primary font family name")] = (
        None
    )
    secondary: Annotated[
        Optional[str], Field(description="Secondary font family name")
    ] = None
    font_urls: Annotated[
        Optional[list[AnyUrl]],
        Field(description="URLs to web font files if using custom fonts"),
    ] = None


class AssetType(Enum):
    image = "image"
    video = "video"
    audio = "audio"
    text = "text"


class Asset(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_id: Annotated[str, Field(description="Unique identifier for this asset")]
    asset_type: Annotated[AssetType, Field(description="Type of asset")]
    url: Annotated[AnyUrl, Field(description="URL to CDN-hosted asset file")]
    tags: Annotated[
        Optional[list[str]],
        Field(
            description="Tags for asset discovery (e.g., 'holiday', 'lifestyle', 'product_shot')"
        ),
    ] = None
    name: Annotated[Optional[str], Field(description="Human-readable asset name")] = (
        None
    )
    description: Annotated[
        Optional[str], Field(description="Asset description or usage notes")
    ] = None
    width: Annotated[
        Optional[int], Field(description="Image/video width in pixels")
    ] = None
    height: Annotated[
        Optional[int], Field(description="Image/video height in pixels")
    ] = None
    duration_seconds: Annotated[
        Optional[float], Field(description="Video/audio duration in seconds")
    ] = None
    file_size_bytes: Annotated[
        Optional[int], Field(description="File size in bytes")
    ] = None
    format: Annotated[
        Optional[str], Field(description="File format (e.g., 'jpg', 'mp4', 'mp3')")
    ] = None
    metadata: Annotated[
        Optional[dict[str, Any]],
        Field(description="Additional asset-specific metadata"),
    ] = None


class FeedFormat(Enum):
    google_merchant_center = "google_merchant_center"
    facebook_catalog = "facebook_catalog"
    custom = "custom"


class UpdateFrequency(Enum):
    realtime = "realtime"
    hourly = "hourly"
    daily = "daily"
    weekly = "weekly"


class ProductCatalog(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    feed_url: Annotated[AnyUrl, Field(description="URL to product catalog feed")]
    feed_format: Annotated[
        Optional[FeedFormat], Field(description="Format of the product feed")
    ] = "google_merchant_center"
    categories: Annotated[
        Optional[list[str]],
        Field(
            description="Product categories available in the catalog (for filtering)"
        ),
    ] = None
    last_updated: Annotated[
        Optional[AwareDatetime],
        Field(description="When the product catalog was last updated"),
    ] = None
    update_frequency: Annotated[
        Optional[UpdateFrequency],
        Field(description="How frequently the product catalog is updated"),
    ] = None


class Disclaimer(BaseModel):
    text: Annotated[str, Field(description="Disclaimer text")]
    context: Annotated[
        Optional[str],
        Field(
            description="When this disclaimer applies (e.g., 'financial_products', 'health_claims', 'all')"
        ),
    ] = None
    required: Annotated[
        Optional[bool], Field(description="Whether this disclaimer must appear")
    ] = True


class Contact(BaseModel):
    email: Annotated[Optional[EmailStr], Field(description="Contact email")] = None
    phone: Annotated[Optional[str], Field(description="Contact phone number")] = None


class Metadata(BaseModel):
    created_date: Annotated[
        Optional[AwareDatetime],
        Field(description="When this brand manifest was created"),
    ] = None
    updated_date: Annotated[
        Optional[AwareDatetime],
        Field(description="When this brand manifest was last updated"),
    ] = None
    version: Annotated[
        Optional[str], Field(description="Brand card version number")
    ] = None


class BrandManifest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[
        AnyUrl,
        Field(
            description="Primary brand URL for context and asset discovery. Creative agents can infer brand information from this URL."
        ),
    ]
    name: Annotated[Optional[str], Field(description="Brand or business name")] = None
    logos: Annotated[
        Optional[list[Logo]],
        Field(
            description="Brand logo assets with semantic tags for different use cases"
        ),
    ] = None
    colors: Annotated[Optional[Colors], Field(description="Brand color palette")] = None
    fonts: Annotated[
        Optional[Fonts], Field(description="Brand typography guidelines")
    ] = None
    tone: Annotated[
        Optional[str],
        Field(
            description="Brand voice and messaging tone (e.g., 'professional', 'casual', 'humorous', 'trustworthy', 'innovative')"
        ),
    ] = None
    tagline: Annotated[Optional[str], Field(description="Brand tagline or slogan")] = (
        None
    )
    assets: Annotated[
        Optional[list[Asset]],
        Field(
            description="Brand asset library with explicit assets and tags. Assets are referenced inline with URLs pointing to CDN-hosted files."
        ),
    ] = None
    product_catalog: Annotated[
        Optional[ProductCatalog],
        Field(
            description="Product catalog information for e-commerce advertisers. Enables SKU-level creative generation and product selection."
        ),
    ] = None
    disclaimers: Annotated[
        Optional[list[Disclaimer]],
        Field(
            description="Legal disclaimers or required text that must appear in creatives"
        ),
    ] = None
    industry: Annotated[
        Optional[str],
        Field(
            description="Industry or vertical (e.g., 'retail', 'automotive', 'finance', 'healthcare')"
        ),
    ] = None
    target_audience: Annotated[
        Optional[str], Field(description="Primary target audience description")
    ] = None
    contact: Annotated[
        Optional[Contact], Field(description="Brand contact information")
    ] = None
    metadata: Annotated[
        Optional[Metadata], Field(description="Additional brand metadata")
    ] = None


Asset9 = Asset


ProductCatalog7 = ProductCatalog


class BrandManifest6(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[
        Optional[AnyUrl],
        Field(
            description="Primary brand URL for context and asset discovery. Creative agents can infer brand information from this URL."
        ),
    ] = None
    name: Annotated[str, Field(description="Brand or business name")]
    logos: Annotated[
        Optional[list[Logo]],
        Field(
            description="Brand logo assets with semantic tags for different use cases"
        ),
    ] = None
    colors: Annotated[Optional[Colors], Field(description="Brand color palette")] = None
    fonts: Annotated[
        Optional[Fonts], Field(description="Brand typography guidelines")
    ] = None
    tone: Annotated[
        Optional[str],
        Field(
            description="Brand voice and messaging tone (e.g., 'professional', 'casual', 'humorous', 'trustworthy', 'innovative')"
        ),
    ] = None
    tagline: Annotated[Optional[str], Field(description="Brand tagline or slogan")] = (
        None
    )
    assets: Annotated[
        Optional[list[Asset9]],
        Field(
            description="Brand asset library with explicit assets and tags. Assets are referenced inline with URLs pointing to CDN-hosted files."
        ),
    ] = None
    product_catalog: Annotated[
        Optional[ProductCatalog7],
        Field(
            description="Product catalog information for e-commerce advertisers. Enables SKU-level creative generation and product selection."
        ),
    ] = None
    disclaimers: Annotated[
        Optional[list[Disclaimer]],
        Field(
            description="Legal disclaimers or required text that must appear in creatives"
        ),
    ] = None
    industry: Annotated[
        Optional[str],
        Field(
            description="Industry or vertical (e.g., 'retail', 'automotive', 'finance', 'healthcare')"
        ),
    ] = None
    target_audience: Annotated[
        Optional[str], Field(description="Primary target audience description")
    ] = None
    contact: Annotated[
        Optional[Contact], Field(description="Brand contact information")
    ] = None
    metadata: Annotated[
        Optional[Metadata], Field(description="Additional brand metadata")
    ] = None


class ProductSelectors(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    manifest_skus: Annotated[
        Optional[list[str]],
        Field(
            description="Direct product SKU references from the brand manifest product catalog"
        ),
    ] = None
    manifest_tags: Annotated[
        Optional[list[str]],
        Field(
            description="Select products by tags from the brand manifest product catalog (e.g., 'organic', 'sauces', 'holiday')"
        ),
    ] = None
    manifest_category: Annotated[
        Optional[str],
        Field(
            description="Select products from a specific category in the brand manifest product catalog (e.g., 'beverages/soft-drinks', 'food/sauces')"
        ),
    ] = None
    manifest_query: Annotated[
        Optional[str],
        Field(
            description="Natural language query to select products from the brand manifest (e.g., 'all Kraft Heinz pasta sauces', 'organic products under $20')"
        ),
    ] = None


class Offering(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[
        str,
        Field(description="Offering name (e.g., 'Winter Sale', 'New Product Launch')"),
    ]
    description: Annotated[
        Optional[str], Field(description="Description of what's being offered")
    ] = None
    assets: Annotated[
        Optional[list[dict[str, Any]]],
        Field(description="Assets specific to this offering"),
    ] = None


class AssetType14(Enum):
    image = "image"
    video = "video"
    audio = "audio"
    text = "text"
    html = "html"
    css = "css"
    javascript = "javascript"


class AssetSelectors(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    tags: Annotated[
        Optional[list[str]],
        Field(
            description="Select assets with specific tags (e.g., ['holiday', 'premium'])"
        ),
    ] = None
    asset_types: Annotated[
        Optional[list[AssetType14]],
        Field(description="Filter by asset type (e.g., ['image', 'video'])"),
    ] = None
    exclude_tags: Annotated[
        Optional[list[str]], Field(description="Exclude assets with these tags")
    ] = None


class PromotedOfferings(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    brand_manifest: Annotated[
        Union[Union[BrandManifest, BrandManifest6], AnyUrl],
        Field(
            description="Brand manifest provided either as an inline object or a URL string pointing to a hosted manifest",
            examples=[
                {
                    "description": "Inline brand manifest",
                    "data": {
                        "url": "https://acmecorp.com",
                        "name": "ACME Corporation",
                        "colors": {"primary": "#FF6B35"},
                    },
                },
                {
                    "description": "URL string reference to hosted manifest",
                    "data": "https://cdn.acmecorp.com/brand-manifest.json",
                },
            ],
            title="Brand Manifest Reference",
        ),
    ]
    product_selectors: Annotated[
        Optional[ProductSelectors],
        Field(
            description="Specification of products or offerings being promoted in a campaign. Supports multiple selection methods from the brand manifest that can be combined using UNION (OR) logic. When multiple selection methods are provided, products matching ANY of the criteria are selected (logical OR, not AND).",
            examples=[
                {
                    "description": "Direct SKU selection for specific products from brand manifest",
                    "data": {"manifest_skus": ["SKU-12345", "SKU-67890"]},
                },
                {
                    "description": "UNION selection: products tagged 'organic' OR 'sauces' OR in 'food/condiments' category from brand manifest",
                    "data": {
                        "manifest_tags": ["organic", "sauces"],
                        "manifest_category": "food/condiments",
                    },
                },
                {
                    "description": "Natural language product selection from brand manifest",
                    "data": {"manifest_query": "all Kraft Heinz pasta sauces under $5"},
                },
                {
                    "description": "Select products by tags",
                    "data": {"manifest_tags": ["holiday"]},
                },
            ],
            title="Promoted Products",
        ),
    ] = None
    offerings: Annotated[
        Optional[list[Offering]],
        Field(
            description="Inline offerings for campaigns without a product catalog. Each offering has a name, description, and associated assets."
        ),
    ] = None
    asset_selectors: Annotated[
        Optional[AssetSelectors],
        Field(
            description="Selectors to choose specific assets from the brand manifest"
        ),
    ] = None


class PreviewCreativeRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    format_id: Annotated[
        FormatId,
        Field(
            description="Structured format identifier with agent URL and format name",
            title="Format ID",
        ),
    ]
    creative_manifest: Annotated[
        CreativeManifest,
        Field(
            description="Complete specification of a creative with all assets needed for rendering in a specific format. Each asset is typed according to its asset_role from the format specification and contains the actual content/URL that fulfills the format requirements.",
            title="Creative Manifest",
        ),
    ]
    inputs: Annotated[
        Optional[list[Input]],
        Field(
            description="Array of input sets for generating multiple preview variants. Each input set defines macros and context values for one preview rendering. If not provided, creative agent will generate default previews."
        ),
    ] = None
    template_id: Annotated[
        Optional[str],
        Field(description="Specific template ID for custom format rendering"),
    ] = None
    promoted_offerings: Annotated[
        Optional[PromotedOfferings],
        Field(
            description="Complete offering specification combining brand manifest, product selectors, and asset filters. Provides all context needed for creative generation about what is being promoted.",
            examples=[
                {
                    "brand_manifest": {"url": "https://brand.com"},
                    "product_selectors": {"manifest_skus": ["SKU-123", "SKU-456"]},
                    "asset_selectors": {
                        "tags": ["holiday"],
                        "asset_types": ["image", "video"],
                    },
                }
            ],
            title="Promoted Offerings",
        ),
    ] = None
