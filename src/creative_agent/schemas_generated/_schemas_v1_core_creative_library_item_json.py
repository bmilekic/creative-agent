# generated by datamodel-codegen:
#   filename:  _schemas_v1_core_creative-library-item_json.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Optional, Union

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, Field


class Status(Enum):
    processing = "processing"
    approved = "approved"
    rejected = "rejected"
    pending_review = "pending_review"


class PerformanceMetrics(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    total_impressions: Annotated[
        Optional[int], Field(description="Total impressions delivered", ge=0)
    ] = None
    total_clicks: Annotated[
        Optional[int], Field(description="Total clicks generated", ge=0)
    ] = None
    average_ctr: Annotated[
        Optional[float],
        Field(
            description="Average click-through rate across assignments", ge=0.0, le=1.0
        ),
    ] = None
    last_served: Annotated[
        Optional[AwareDatetime],
        Field(description="When this creative last served an impression"),
    ] = None


class Status1(Enum):
    approved = "approved"
    pending = "pending"
    rejected = "rejected"
    flagged = "flagged"


class Compliance(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    status: Annotated[Status1, Field(description="Compliance status")]
    issues: Annotated[
        Optional[list[str]], Field(description="Array of compliance issues")
    ] = None
    reviewed_date: Annotated[
        Optional[AwareDatetime],
        Field(description="When compliance review was completed"),
    ] = None


class Assets(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Annotated[
        str,
        Field(
            description="Type of asset. Common types: headline, body_text, thumbnail_image, product_image, featured_image, logo, cta_text, price_text, sponsor_name, author_name, click_url"
        ),
    ]
    asset_id: Annotated[
        str, Field(description="Unique identifier for the asset within the creative")
    ]
    content_uri: Annotated[
        AnyUrl, Field(description="URL for media assets (images, videos, etc.)")
    ]
    content: Annotated[
        Optional[Union[str, list[str]]],
        Field(
            description="Text content for text-based assets like headlines, body text, CTA text, etc."
        ),
    ] = None


class Assets14(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Annotated[
        str,
        Field(
            description="Type of asset. Common types: headline, body_text, thumbnail_image, product_image, featured_image, logo, cta_text, price_text, sponsor_name, author_name, click_url"
        ),
    ]
    asset_id: Annotated[
        str, Field(description="Unique identifier for the asset within the creative")
    ]
    content_uri: Annotated[
        Optional[AnyUrl],
        Field(description="URL for media assets (images, videos, etc.)"),
    ] = None
    content: Annotated[
        Union[str, list[str]],
        Field(
            description="Text content for text-based assets like headlines, body text, CTA text, etc."
        ),
    ]


class CreativeLibraryItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    creative_id: Annotated[str, Field(description="Unique identifier for the creative")]
    name: Annotated[str, Field(description="Human-readable creative name")]
    format: Annotated[
        str, Field(description="Creative format type (e.g., video, audio, display)")
    ]
    status: Annotated[
        Status, Field(description="Status of a creative asset", title="Creative Status")
    ]
    platform_id: Annotated[
        Optional[str],
        Field(description="Platform-specific ID assigned to the creative"),
    ] = None
    created_date: Annotated[
        AwareDatetime,
        Field(description="When the creative was uploaded to the library"),
    ]
    last_updated: Annotated[
        Optional[AwareDatetime],
        Field(description="When the creative was last modified"),
    ] = None
    media_url: Annotated[
        Optional[AnyUrl], Field(description="URL of the creative file")
    ] = None
    click_url: Annotated[
        Optional[AnyUrl], Field(description="Landing page URL for the creative")
    ] = None
    duration: Annotated[
        Optional[float],
        Field(description="Duration in milliseconds (for video/audio)", ge=0.0),
    ] = None
    width: Annotated[
        Optional[float],
        Field(description="Width in pixels (for video/display)", ge=0.0),
    ] = None
    height: Annotated[
        Optional[float],
        Field(description="Height in pixels (for video/display)", ge=0.0),
    ] = None
    file_size: Annotated[
        Optional[int], Field(description="File size in bytes", ge=0)
    ] = None
    assignments: Annotated[
        Optional[list[str]],
        Field(description="Current package assignments for this creative"),
    ] = None
    assignment_count: Annotated[
        Optional[int], Field(description="Number of active package assignments", ge=0)
    ] = None
    performance_metrics: Annotated[
        Optional[PerformanceMetrics],
        Field(description="Aggregated performance data across all assignments"),
    ] = None
    compliance: Annotated[
        Optional[Compliance], Field(description="Compliance review status")
    ] = None
    review_feedback: Annotated[
        Optional[str], Field(description="Latest feedback from platform review")
    ] = None
    tags: Annotated[
        Optional[list[str]], Field(description="User-defined tags for organization")
    ] = None
    assets: Annotated[
        Optional[list[Union[Assets, Assets14]]],
        Field(description="Sub-assets for multi-asset formats like carousels"),
    ] = None
