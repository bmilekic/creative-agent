# generated by datamodel-codegen:
#   filename:  _schemas_v1_signals_get-signals-request_json.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Account(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    platform: Annotated[str, Field(description="Platform identifier")]
    account: Annotated[str, Field(description="Account identifier on that platform")]


class Country(RootModel[str]):
    root: Annotated[str, Field(pattern="^[A-Z]{2}$")]


class DeliverTo(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    platforms: Annotated[
        Union[str, list[str]],
        Field(description="Target platforms for signal deployment"),
    ]
    accounts: Annotated[
        Optional[list[Account]],
        Field(description="Specific platform-account combinations"),
    ] = None
    countries: Annotated[
        list[Country],
        Field(description="Countries where signals will be used (ISO codes)"),
    ]


class CatalogType(Enum):
    marketplace = "marketplace"
    custom = "custom"
    owned = "owned"


class Filters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    catalog_types: Annotated[
        Optional[list[CatalogType]], Field(description="Filter by catalog type")
    ] = None
    data_providers: Annotated[
        Optional[list[str]], Field(description="Filter by specific data providers")
    ] = None
    max_cpm: Annotated[
        Optional[float], Field(description="Maximum CPM price filter", ge=0.0)
    ] = None
    min_coverage_percentage: Annotated[
        Optional[float],
        Field(description="Minimum coverage requirement", ge=0.0, le=100.0),
    ] = None


class GetSignalsRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    adcp_version: Annotated[
        Optional[str],
        Field(
            description="AdCP schema version for this request",
            pattern="^\\d+\\.\\d+\\.\\d+$",
        ),
    ] = "1.5.0"
    signal_spec: Annotated[
        str, Field(description="Natural language description of the desired signals")
    ]
    deliver_to: Annotated[
        DeliverTo, Field(description="Where the signals need to be delivered")
    ]
    filters: Annotated[
        Optional[Filters], Field(description="Filters to refine results")
    ] = None
    max_results: Annotated[
        Optional[int], Field(description="Maximum number of results to return", ge=1)
    ] = None
