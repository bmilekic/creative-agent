# generated by datamodel-codegen:
#   filename:  _schemas_v1_signals_get-signals-response_json.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Optional

from pydantic import BaseModel, ConfigDict, Field


class SignalType(Enum):
    marketplace = "marketplace"
    custom = "custom"
    owned = "owned"


class Scope(Enum):
    platform_wide = "platform-wide"
    account_specific = "account-specific"


class Deployment(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    platform: Annotated[str, Field(description="Platform name")]
    account: Annotated[
        Optional[str], Field(description="Specific account if applicable")
    ] = None
    is_live: Annotated[bool, Field(description="Whether signal is currently active")]
    scope: Annotated[Scope, Field(description="Deployment scope")]
    decisioning_platform_segment_id: Annotated[
        Optional[str], Field(description="Platform-specific segment ID")
    ] = None
    estimated_activation_duration_minutes: Annotated[
        Optional[float], Field(description="Time to activate if not live", ge=0.0)
    ] = None


class Pricing(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    cpm: Annotated[float, Field(description="Cost per thousand impressions", ge=0.0)]
    currency: Annotated[str, Field(description="Currency code", pattern="^[A-Z]{3}$")]


class Signal(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    signal_agent_segment_id: Annotated[
        str, Field(description="Unique identifier for the signal")
    ]
    name: Annotated[str, Field(description="Human-readable signal name")]
    description: Annotated[str, Field(description="Detailed signal description")]
    signal_type: Annotated[SignalType, Field(description="Type of signal")]
    data_provider: Annotated[str, Field(description="Name of the data provider")]
    coverage_percentage: Annotated[
        float, Field(description="Percentage of audience coverage", ge=0.0, le=100.0)
    ]
    deployments: Annotated[
        list[Deployment], Field(description="Array of platform deployments")
    ]
    pricing: Annotated[Pricing, Field(description="Pricing information")]


class Error(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    code: Annotated[str, Field(description="Error code for programmatic handling")]
    message: Annotated[str, Field(description="Human-readable error message")]
    field: Annotated[
        Optional[str],
        Field(
            description="Field path associated with the error (e.g., 'packages[0].targeting')"
        ),
    ] = None
    suggestion: Annotated[
        Optional[str], Field(description="Suggested fix for the error")
    ] = None
    retry_after: Annotated[
        Optional[float],
        Field(description="Seconds to wait before retrying the operation", ge=0.0),
    ] = None
    details: Annotated[
        Optional[Any], Field(description="Additional task-specific error details")
    ] = None


class GetSignalsResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    adcp_version: Annotated[
        str,
        Field(
            description="AdCP schema version used for this response",
            pattern="^\\d+\\.\\d+\\.\\d+$",
        ),
    ]
    message: Annotated[
        str, Field(description="Human-readable summary of the signal discovery results")
    ]
    context_id: Annotated[
        str, Field(description="Session continuity identifier for follow-up requests")
    ]
    signals: Annotated[list[Signal], Field(description="Array of matching signals")]
    errors: Annotated[
        Optional[list[Error]],
        Field(
            description="Task-specific errors and warnings (e.g., signal discovery or pricing issues)"
        ),
    ] = None
