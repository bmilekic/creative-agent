# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_package-request_json.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Pacing(Enum):
    even = "even"
    asap = "asap"
    front_loaded = "front_loaded"


class Budget(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    total: Annotated[float, Field(description="Total budget amount", ge=0.0)]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    pacing: Annotated[
        Optional[Pacing], Field(description="Budget pacing strategy", title="Pacing")
    ] = None


class GeoCountryAnyOfItem(RootModel[str]):
    root: Annotated[str, Field(pattern="^[A-Z]{2}$")]


class FrequencyCap(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    suppress_minutes: Annotated[
        float, Field(description="Minutes to suppress after impression", ge=0.0)
    ]


class TargetingOverlay(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    geo_country_any_of: Annotated[
        Optional[list[GeoCountryAnyOfItem]],
        Field(
            description="Restrict delivery to specific countries (ISO codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_region_any_of: Annotated[
        Optional[list[str]],
        Field(
            description="Restrict delivery to specific regions/states. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_metro_any_of: Annotated[
        Optional[list[str]],
        Field(
            description="Restrict delivery to specific metro areas (DMA codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_postal_code_any_of: Annotated[
        Optional[list[str]],
        Field(
            description="Restrict delivery to specific postal/ZIP codes. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    frequency_cap: Annotated[
        Optional[FrequencyCap],
        Field(
            description="Frequency capping settings for package-level application",
            title="Frequency Cap",
        ),
    ] = None


class PackageRequest1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    buyer_ref: Annotated[
        str, Field(description="Buyer's reference identifier for this package")
    ]
    products: Annotated[
        list[str], Field(description="Array of product IDs to include in this package")
    ]
    format_ids: Annotated[
        list[str],
        Field(
            description="Array of format IDs that will be used for this package - must be supported by all products"
        ),
    ]
    budget: Annotated[
        Optional[Budget],
        Field(
            description="Budget configuration for a media buy or package",
            title="Budget",
        ),
    ] = None
    targeting_overlay: Annotated[
        Optional[TargetingOverlay],
        Field(
            description="Optional geographic refinements for media buys. Most targeting should be expressed in the brief and handled by the publisher. These fields are primarily for geographic restrictions (RCT testing, regulatory compliance).",
            title="Targeting Overlay",
        ),
    ] = None
    creative_ids: Annotated[
        Optional[list[str]],
        Field(description="Creative IDs to assign to this package at creation time"),
    ] = None


class PackageRequest2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    buyer_ref: Annotated[
        str, Field(description="Buyer's reference identifier for this package")
    ]
    products: Annotated[
        list[str], Field(description="Array of product IDs to include in this package")
    ]
    format_selection: Annotated[
        dict[str, Any], Field(description="Dynamic format selection criteria")
    ]
    budget: Annotated[
        Optional[Any],
        Field(description="Circular reference to /schemas/v1/core/budget.json"),
    ] = None
    targeting_overlay: Annotated[
        Optional[Any],
        Field(description="Circular reference to /schemas/v1/core/targeting.json"),
    ] = None
    creative_ids: Annotated[
        Optional[list[str]],
        Field(description="Creative IDs to assign to this package at creation time"),
    ] = None


class PackageRequest(RootModel[Union[PackageRequest1, PackageRequest2]]):
    root: Annotated[
        Union[PackageRequest1, PackageRequest2],
        Field(
            description="Package configuration for media buy creation",
            title="Package Request",
        ),
    ]
