# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_add-creative-assets-response_json.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Optional

from pydantic import BaseModel, ConfigDict, Field


class Status(Enum):
    processing = "processing"
    approved = "approved"
    rejected = "rejected"
    pending_review = "pending_review"


class SuggestedAdaptation(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    adaptation_id: Annotated[
        str, Field(description="Unique identifier for this adaptation")
    ]
    format_id: Annotated[str, Field(description="Target format ID for the adaptation")]
    name: Annotated[str, Field(description="Suggested name for the adapted creative")]
    description: Annotated[str, Field(description="What this adaptation does")]
    changes_summary: Annotated[
        list[str], Field(description="List of changes that will be made")
    ]
    rationale: Annotated[str, Field(description="Why this adaptation is recommended")]
    estimated_performance_lift: Annotated[
        Optional[float],
        Field(description="Expected performance improvement (percentage)", ge=0.0),
    ] = None


class AssetStatus(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    creative_id: Annotated[str, Field(description="The creative ID from the request")]
    status: Annotated[
        Status, Field(description="Status of a creative asset", title="Creative Status")
    ]
    platform_id: Annotated[
        Optional[str],
        Field(description="Platform-specific ID assigned to the creative"),
    ] = None
    review_feedback: Annotated[
        Optional[str], Field(description="Feedback from platform review (if any)")
    ] = None
    suggested_adaptations: Annotated[
        Optional[list[SuggestedAdaptation]],
        Field(description="Array of recommended format adaptations"),
    ] = None


class AddCreativeAssetsResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_statuses: Annotated[
        list[AssetStatus],
        Field(description="Array of status information for each uploaded asset"),
    ]
