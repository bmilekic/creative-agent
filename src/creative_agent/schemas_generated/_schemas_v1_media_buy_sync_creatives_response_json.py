# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_sync-creatives-response_json.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Optional

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, Field


class Status(Enum):
    submitted = "submitted"
    working = "working"
    input_required = "input-required"
    completed = "completed"
    canceled = "canceled"
    failed = "failed"
    rejected = "rejected"
    auth_required = "auth-required"
    unknown = "unknown"


class Action(Enum):
    created = "created"
    updated = "updated"
    unchanged = "unchanged"
    failed = "failed"
    deleted = "deleted"


class Creative(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    creative_id: Annotated[str, Field(description="Creative ID from the request")]
    action: Annotated[Action, Field(description="Action taken for this creative")]
    platform_id: Annotated[
        Optional[str],
        Field(description="Platform-specific ID assigned to the creative"),
    ] = None
    changes: Annotated[
        Optional[list[str]],
        Field(
            description="Field names that were modified (only present when action='updated')"
        ),
    ] = None
    errors: Annotated[
        Optional[list[str]],
        Field(
            description="Validation or processing errors (only present when action='failed')"
        ),
    ] = None
    warnings: Annotated[
        Optional[list[str]], Field(description="Non-fatal warnings about this creative")
    ] = None
    preview_url: Annotated[
        Optional[AnyUrl],
        Field(
            description="Preview URL for generative creatives (only present for generative formats)"
        ),
    ] = None
    expires_at: Annotated[
        Optional[AwareDatetime],
        Field(
            description="ISO 8601 timestamp when preview link expires (only present when preview_url exists)"
        ),
    ] = None
    assigned_to: Annotated[
        Optional[list[str]],
        Field(
            description="Package IDs this creative was successfully assigned to (only present when assignments were requested)"
        ),
    ] = None
    assignment_errors: Annotated[
        Optional[dict[str, str]],
        Field(
            description="Assignment errors by package ID (only present when assignment failures occurred)"
        ),
    ] = None


class SyncCreativesResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    adcp_version: Annotated[
        str,
        Field(
            description="AdCP schema version used for this response",
            pattern="^\\d+\\.\\d+\\.\\d+$",
        ),
    ]
    message: Annotated[
        str,
        Field(
            description="Human-readable result message (e.g., 'Synced 3 creatives: 2 created, 1 updated')"
        ),
    ]
    context_id: Annotated[
        Optional[str],
        Field(
            description="Context ID for tracking async operations and conversational approval workflows"
        ),
    ] = None
    status: Annotated[
        Status,
        Field(
            description="Standardized task status values based on A2A TaskState enum. Indicates the current state of any AdCP operation.",
            title="Task Status",
        ),
    ]
    task_id: Annotated[
        Optional[str],
        Field(
            description="Unique identifier for tracking this async operation (present for submitted/working status)"
        ),
    ] = None
    dry_run: Annotated[
        Optional[bool],
        Field(description="Whether this was a dry run (no actual changes made)"),
    ] = None
    creatives: Annotated[
        list[Creative], Field(description="Results for each creative processed")
    ]
