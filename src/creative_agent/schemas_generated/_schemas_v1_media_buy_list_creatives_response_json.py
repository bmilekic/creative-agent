# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_list-creatives-response_json.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Optional, Union

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, Field


class Direction(Enum):
    asc = "asc"
    desc = "desc"


class SortApplied(BaseModel):
    field: Optional[str] = None
    direction: Optional[Direction] = None


class QuerySummary(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    total_matching: Annotated[
        int,
        Field(
            description="Total number of creatives matching filters (across all pages)",
            ge=0,
        ),
    ]
    returned: Annotated[
        int, Field(description="Number of creatives returned in this response", ge=0)
    ]
    filters_applied: Annotated[
        Optional[list[str]],
        Field(description="List of filters that were applied to the query"),
    ] = None
    sort_applied: Annotated[
        Optional[SortApplied], Field(description="Sort order that was applied")
    ] = None


class Pagination(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    limit: Annotated[
        int, Field(description="Maximum number of results requested", ge=1)
    ]
    offset: Annotated[int, Field(description="Number of results skipped", ge=0)]
    has_more: Annotated[bool, Field(description="Whether more results are available")]
    total_pages: Annotated[
        Optional[int], Field(description="Total number of pages available", ge=0)
    ] = None
    current_page: Annotated[
        Optional[int], Field(description="Current page number (1-based)", ge=1)
    ] = None


class Status(Enum):
    processing = "processing"
    approved = "approved"
    rejected = "rejected"
    pending_review = "pending_review"


class SnippetType(Enum):
    vast_xml = "vast_xml"
    vast_url = "vast_url"
    html = "html"
    javascript = "javascript"
    iframe = "iframe"
    daast_url = "daast_url"


class Status13(Enum):
    active = "active"
    paused = "paused"
    ended = "ended"


class AssignedPackage(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    package_id: Annotated[str, Field(description="Package identifier")]
    package_name: Annotated[
        Optional[str], Field(description="Human-readable package name")
    ] = None
    assigned_date: Annotated[
        AwareDatetime, Field(description="When this assignment was created")
    ]
    status: Annotated[Status13, Field(description="Status of this specific assignment")]


class Assignments(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    assignment_count: Annotated[
        int, Field(description="Total number of active package assignments", ge=0)
    ]
    assigned_packages: Annotated[
        Optional[list[AssignedPackage]],
        Field(description="List of packages this creative is assigned to"),
    ] = None


class Performance(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    impressions: Annotated[
        Optional[int],
        Field(description="Total impressions across all assignments", ge=0),
    ] = None
    clicks: Annotated[
        Optional[int], Field(description="Total clicks across all assignments", ge=0)
    ] = None
    ctr: Annotated[
        Optional[float],
        Field(description="Click-through rate (clicks/impressions)", ge=0.0, le=1.0),
    ] = None
    conversion_rate: Annotated[
        Optional[float],
        Field(description="Conversion rate across all assignments", ge=0.0, le=1.0),
    ] = None
    performance_score: Annotated[
        Optional[float],
        Field(description="Aggregated performance score (0-100)", ge=0.0, le=100.0),
    ] = None
    last_updated: Annotated[
        AwareDatetime, Field(description="When performance data was last updated")
    ]


class SubAssets(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Annotated[
        str,
        Field(
            description="Type of asset. Common types: headline, body_text, thumbnail_image, product_image, featured_image, logo, cta_text, price_text, sponsor_name, author_name, click_url"
        ),
    ]
    asset_id: Annotated[
        str, Field(description="Unique identifier for the asset within the creative")
    ]
    content_uri: Annotated[
        AnyUrl, Field(description="URL for media assets (images, videos, etc.)")
    ]
    content: Annotated[
        Optional[Union[str, list[str]]],
        Field(
            description="Text content for text-based assets like headlines, body text, CTA text, etc."
        ),
    ] = None


class SubAssets1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Annotated[
        str,
        Field(
            description="Type of asset. Common types: headline, body_text, thumbnail_image, product_image, featured_image, logo, cta_text, price_text, sponsor_name, author_name, click_url"
        ),
    ]
    asset_id: Annotated[
        str, Field(description="Unique identifier for the asset within the creative")
    ]
    content_uri: Annotated[
        Optional[AnyUrl],
        Field(description="URL for media assets (images, videos, etc.)"),
    ] = None
    content: Annotated[
        Union[str, list[str]],
        Field(
            description="Text content for text-based assets like headlines, body text, CTA text, etc."
        ),
    ]


class Creative(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    creative_id: Annotated[str, Field(description="Unique identifier for the creative")]
    name: Annotated[str, Field(description="Human-readable creative name")]
    format: Annotated[str, Field(description="Creative format type")]
    status: Annotated[
        Status, Field(description="Status of a creative asset", title="Creative Status")
    ]
    created_date: Annotated[
        AwareDatetime,
        Field(description="When the creative was uploaded to the library"),
    ]
    updated_date: Annotated[
        AwareDatetime, Field(description="When the creative was last modified")
    ]
    media_url: Annotated[
        Optional[AnyUrl],
        Field(description="URL of the creative file (for hosted assets)"),
    ] = None
    snippet: Annotated[
        Optional[str],
        Field(
            description="Third-party tag, VAST XML, or code snippet (for third-party assets)"
        ),
    ] = None
    snippet_type: Annotated[
        Optional[SnippetType],
        Field(
            description="Types of third-party creative snippets supported by AdCP",
            examples=[
                {
                    "type": "vast_xml",
                    "description": "Inline VAST XML",
                    "snippet": '<VAST version="3.0"><Ad><InLine><AdTitle>Sample Ad</AdTitle>...</InLine></Ad></VAST>',
                },
                {
                    "type": "vast_url",
                    "description": "VAST endpoint URL",
                    "snippet": "https://ads.example.com/vast?campaign=12345&placement=video",
                },
                {
                    "type": "html",
                    "description": "HTML display ad",
                    "snippet": '<div style="width:300px;height:250px"><img src="banner.jpg" alt="Ad"/></div>',
                },
                {
                    "type": "javascript",
                    "description": "JavaScript ad tag",
                    "snippet": '<script type="text/javascript" src="https://ads.example.com/tag.js"></script>',
                },
                {
                    "type": "iframe",
                    "description": "iFrame ad tag",
                    "snippet": '<iframe src="https://ads.example.com/creative" width="300" height="250"></iframe>',
                },
                {
                    "type": "daast_url",
                    "description": "DAAST audio ad URL",
                    "snippet": "https://audio-ads.example.com/daast?campaign=audio123",
                },
            ],
            title="Snippet Type",
        ),
    ] = None
    click_url: Annotated[
        Optional[AnyUrl], Field(description="Landing page URL for the creative")
    ] = None
    duration: Annotated[
        Optional[float],
        Field(description="Duration in milliseconds (for video/audio)", ge=0.0),
    ] = None
    width: Annotated[
        Optional[float],
        Field(description="Width in pixels (for video/display)", ge=0.0),
    ] = None
    height: Annotated[
        Optional[float],
        Field(description="Height in pixels (for video/display)", ge=0.0),
    ] = None
    tags: Annotated[
        Optional[list[str]],
        Field(description="User-defined tags for organization and searchability"),
    ] = None
    assignments: Annotated[
        Optional[Assignments],
        Field(
            description="Current package assignments (included when include_assignments=true)"
        ),
    ] = None
    performance: Annotated[
        Optional[Performance],
        Field(
            description="Aggregated performance metrics (included when include_performance=true)"
        ),
    ] = None
    sub_assets: Annotated[
        Optional[list[Union[SubAssets, SubAssets1]]],
        Field(
            description="Sub-assets for multi-asset formats (included when include_sub_assets=true)"
        ),
    ] = None


class StatusSummary(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    approved: Annotated[
        Optional[int], Field(description="Number of approved creatives", ge=0)
    ] = None
    pending_review: Annotated[
        Optional[int], Field(description="Number of creatives pending review", ge=0)
    ] = None
    rejected: Annotated[
        Optional[int], Field(description="Number of rejected creatives", ge=0)
    ] = None
    archived: Annotated[
        Optional[int], Field(description="Number of archived creatives", ge=0)
    ] = None


class ListCreativesResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    adcp_version: Annotated[
        str,
        Field(
            description="AdCP schema version used for this response",
            pattern="^\\d+\\.\\d+\\.\\d+$",
        ),
    ]
    message: Annotated[str, Field(description="Human-readable result message")]
    context_id: Annotated[
        Optional[str], Field(description="Context ID for tracking related operations")
    ] = None
    query_summary: Annotated[
        QuerySummary, Field(description="Summary of the query that was executed")
    ]
    pagination: Annotated[
        Pagination, Field(description="Pagination information for navigating results")
    ]
    creatives: Annotated[
        list[Creative], Field(description="Array of creative assets matching the query")
    ]
    format_summary: Annotated[
        Optional[dict[str, int]],
        Field(description="Breakdown of creatives by format type"),
    ] = None
    status_summary: Annotated[
        Optional[StatusSummary], Field(description="Breakdown of creatives by status")
    ] = None
