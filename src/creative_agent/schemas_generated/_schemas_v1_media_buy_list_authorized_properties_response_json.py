# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_list-authorized-properties-response_json.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel


class PropertyType(Enum):
    website = "website"
    mobile_app = "mobile_app"
    ctv_app = "ctv_app"
    dooh = "dooh"
    podcast = "podcast"
    radio = "radio"
    streaming_audio = "streaming_audio"


class Identifier(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Annotated[
        str,
        Field(
            description="Type of identifier (e.g., 'domain', 'bundle_id', 'roku_store_id', 'podcast_guid')"
        ),
    ]
    value: Annotated[
        str,
        Field(
            description="The identifier value. For domain type: 'example.com' matches www.example.com and m.example.com only; 'subdomain.example.com' matches that specific subdomain; '*.example.com' matches all subdomains"
        ),
    ]


class Tag(RootModel[str]):
    root: Annotated[
        str,
        Field(
            description="Lowercase tag with underscores (e.g., 'conde_nast_network', 'premium_content')",
            pattern="^[a-z0-9_]+$",
        ),
    ]


class Property(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    property_type: Annotated[
        PropertyType, Field(description="Type of advertising property")
    ]
    name: Annotated[str, Field(description="Human-readable property name")]
    identifiers: Annotated[
        list[Identifier],
        Field(description="Array of identifiers for this property", min_length=1),
    ]
    tags: Annotated[
        Optional[list[Tag]],
        Field(
            description="Tags for categorization and grouping (e.g., network membership, content categories)"
        ),
    ] = None
    publisher_domain: Annotated[
        str,
        Field(
            description="Domain where adagents.json should be checked for authorization validation"
        ),
    ]


class Tags(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str, Field(description="Human-readable name for this tag")]
    description: Annotated[
        str, Field(description="Description of what this tag represents")
    ]


class PrimaryChannel(Enum):
    display = "display"
    video = "video"
    audio = "audio"
    native = "native"
    dooh = "dooh"
    ctv = "ctv"
    podcast = "podcast"
    retail = "retail"
    social = "social"


class PrimaryCountry(RootModel[str]):
    root: Annotated[str, Field(pattern="^[A-Z]{2}$")]


class Error(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    code: Annotated[str, Field(description="Error code for programmatic handling")]
    message: Annotated[str, Field(description="Human-readable error message")]
    field: Annotated[
        Optional[str],
        Field(
            description="Field path associated with the error (e.g., 'packages[0].targeting')"
        ),
    ] = None
    suggestion: Annotated[
        Optional[str], Field(description="Suggested fix for the error")
    ] = None
    retry_after: Annotated[
        Optional[float],
        Field(description="Seconds to wait before retrying the operation", ge=0.0),
    ] = None
    details: Annotated[
        Optional[Any], Field(description="Additional task-specific error details")
    ] = None


class ListAuthorizedPropertiesResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    adcp_version: Annotated[
        str,
        Field(
            description="AdCP schema version used for this response",
            pattern="^\\d+\\.\\d+\\.\\d+$",
        ),
    ]
    properties: Annotated[
        list[Property],
        Field(
            description="Array of all properties this agent is authorized to represent"
        ),
    ]
    tags: Annotated[
        Optional[dict[str, Tags]],
        Field(description="Metadata for each tag referenced by properties"),
    ] = None
    primary_channels: Annotated[
        Optional[list[PrimaryChannel]],
        Field(
            description="Primary advertising channels represented in this property portfolio. Helps buying agents quickly filter relevance.",
            min_length=1,
        ),
    ] = None
    primary_countries: Annotated[
        Optional[list[PrimaryCountry]],
        Field(
            description="Primary countries (ISO 3166-1 alpha-2 codes) where properties are concentrated. Helps buying agents quickly filter relevance.",
            min_length=1,
        ),
    ] = None
    portfolio_description: Annotated[
        Optional[str],
        Field(
            description="Markdown-formatted description of the property portfolio, including inventory types, audience characteristics, and special features.",
            max_length=5000,
            min_length=1,
        ),
    ] = None
    errors: Annotated[
        Optional[list[Error]],
        Field(
            description="Task-specific errors and warnings (e.g., property availability issues)"
        ),
    ] = None
