# generated by datamodel-codegen:
#   filename:  _schemas_v1_core_push-notification-config_json.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Optional

from pydantic import AnyUrl, BaseModel, ConfigDict, Field


class Scheme(Enum):
    bearer = "Bearer"
    hmac_sha256 = "HMAC-SHA256"


class Authentication(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    schemes: Annotated[
        list[Scheme],
        Field(
            description="Array of authentication schemes. Supported: ['Bearer'] for simple token auth, ['HMAC-SHA256'] for signature verification (recommended for production)",
            max_length=1,
            min_length=1,
        ),
    ]
    credentials: Annotated[
        str,
        Field(
            description="Credentials for authentication. For Bearer: token sent in Authorization header. For HMAC-SHA256: shared secret used to generate signature. Minimum 32 characters. Exchanged out-of-band during onboarding.",
            min_length=32,
        ),
    ]


class PushNotificationConfig(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[
        AnyUrl, Field(description="Webhook endpoint URL for task status notifications")
    ]
    token: Annotated[
        Optional[str],
        Field(
            description="Optional client-provided token for webhook validation. Echoed back in webhook payload to validate request authenticity.",
            min_length=16,
        ),
    ] = None
    authentication: Annotated[
        Authentication,
        Field(
            description="Authentication configuration for webhook delivery (A2A-compatible)"
        ),
    ]
