# generated by datamodel-codegen:
#   filename:  _schemas_v1_core_assets_daast-asset_json.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Optional, Union

from pydantic import AnyUrl, BaseModel, ConfigDict, Field, RootModel


class DaastVersion(Enum):
    field_1_0 = "1.0"
    field_1_1 = "1.1"


class TrackingEvent(Enum):
    start = "start"
    first_quartile = "firstQuartile"
    midpoint = "midpoint"
    third_quartile = "thirdQuartile"
    complete = "complete"
    impression = "impression"
    pause = "pause"
    resume = "resume"
    skip = "skip"
    mute = "mute"
    unmute = "unmute"


class DaastAsset1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[AnyUrl, Field(description="URL endpoint that returns DAAST XML")]
    content: Annotated[Optional[str], Field(description="Inline DAAST XML content")] = (
        None
    )
    daast_version: Annotated[
        Optional[DaastVersion], Field(description="DAAST specification version")
    ] = None
    duration_ms: Annotated[
        Optional[int],
        Field(description="Expected audio duration in milliseconds (if known)", ge=0),
    ] = None
    tracking_events: Annotated[
        Optional[list[TrackingEvent]],
        Field(description="Tracking events supported by this DAAST tag"),
    ] = None
    companion_ads: Annotated[
        Optional[bool], Field(description="Whether companion display ads are included")
    ] = None


class DaastAsset2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[
        Optional[AnyUrl], Field(description="URL endpoint that returns DAAST XML")
    ] = None
    content: Annotated[str, Field(description="Inline DAAST XML content")]
    daast_version: Annotated[
        Optional[DaastVersion], Field(description="DAAST specification version")
    ] = None
    duration_ms: Annotated[
        Optional[int],
        Field(description="Expected audio duration in milliseconds (if known)", ge=0),
    ] = None
    tracking_events: Annotated[
        Optional[list[TrackingEvent]],
        Field(description="Tracking events supported by this DAAST tag"),
    ] = None
    companion_ads: Annotated[
        Optional[bool], Field(description="Whether companion display ads are included")
    ] = None


class DaastAsset(RootModel[Union[DaastAsset1, DaastAsset2]]):
    root: Annotated[
        Union[DaastAsset1, DaastAsset2],
        Field(
            description="DAAST (Digital Audio Ad Serving Template) tag for third-party audio ad serving",
            title="DAAST Asset",
        ),
    ]
