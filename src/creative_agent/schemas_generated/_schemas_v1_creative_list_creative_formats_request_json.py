# generated by datamodel-codegen:
#   filename:  _schemas_v1_creative_list-creative-formats-request_json.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Optional

from pydantic import AnyUrl, BaseModel, ConfigDict, Field


class FormatId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    agent_url: Annotated[
        AnyUrl,
        Field(
            description="URL of the agent that defines this format (e.g., 'https://creatives.adcontextprotocol.org' for standard formats, or 'https://publisher.com/.well-known/adcp/sales' for custom formats)"
        ),
    ]
    id: Annotated[
        str,
        Field(
            description="Format identifier within the agent's namespace (e.g., 'display_300x250', 'video_standard_30s')",
            pattern="^[a-zA-Z0-9_-]+$",
        ),
    ]


class Type(Enum):
    audio = "audio"
    video = "video"
    display = "display"
    dooh = "dooh"


class AssetType(Enum):
    image = "image"
    video = "video"
    audio = "audio"
    text = "text"
    html = "html"
    javascript = "javascript"
    url = "url"


class ListCreativeFormatsRequestCreativeAgent(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    format_ids: Annotated[
        Optional[list[FormatId]],
        Field(description="Return only these specific format IDs"),
    ] = None
    type: Annotated[
        Optional[Type],
        Field(
            description="Filter by format type (technical categories with distinct requirements)"
        ),
    ] = None
    asset_types: Annotated[
        Optional[list[AssetType]],
        Field(
            description="Filter to formats that include these asset types. For third-party tags, search for 'html' or 'javascript'. E.g., ['image', 'text'] returns formats with images and text, ['javascript'] returns formats accepting JavaScript tags."
        ),
    ] = None
    max_width: Annotated[
        Optional[int],
        Field(
            description="Maximum width in pixels (inclusive). Returns formats with width <= this value. Omit for responsive/fluid formats."
        ),
    ] = None
    max_height: Annotated[
        Optional[int],
        Field(
            description="Maximum height in pixels (inclusive). Returns formats with height <= this value. Omit for responsive/fluid formats."
        ),
    ] = None
    min_width: Annotated[
        Optional[int],
        Field(
            description="Minimum width in pixels (inclusive). Returns formats with width >= this value."
        ),
    ] = None
    min_height: Annotated[
        Optional[int],
        Field(
            description="Minimum height in pixels (inclusive). Returns formats with height >= this value."
        ),
    ] = None
    is_responsive: Annotated[
        Optional[bool],
        Field(
            description="Filter for responsive formats that adapt to container size. When true, returns formats without fixed dimensions."
        ),
    ] = None
    name_search: Annotated[
        Optional[str],
        Field(
            description="Search for formats by name (case-insensitive partial match)"
        ),
    ] = None
