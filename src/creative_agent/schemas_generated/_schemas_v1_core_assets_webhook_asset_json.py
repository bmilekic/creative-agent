# generated by datamodel-codegen:
#   filename:  _schemas_v1_core_assets_webhook-asset_json.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Optional

from pydantic import AnyUrl, BaseModel, ConfigDict, Field


class Method(Enum):
    get = "GET"
    post = "POST"


class ResponseType(Enum):
    html = "html"
    json = "json"
    xml = "xml"
    javascript = "javascript"


class Method1(Enum):
    hmac_sha256 = "hmac_sha256"
    api_key = "api_key"
    none = "none"


class Security(BaseModel):
    method: Annotated[Method1, Field(description="Authentication method")]
    hmac_header: Annotated[
        Optional[str],
        Field(description="Header name for HMAC signature (e.g., 'X-Signature')"),
    ] = None
    api_key_header: Annotated[
        Optional[str], Field(description="Header name for API key (e.g., 'X-API-Key')")
    ] = None


class WebhookAsset(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[AnyUrl, Field(description="Webhook URL to call for dynamic content")]
    method: Annotated[Optional[Method], Field(description="HTTP method")] = "POST"
    timeout_ms: Annotated[
        Optional[int],
        Field(
            description="Maximum time to wait for response in milliseconds",
            ge=10,
            le=5000,
        ),
    ] = 500
    supported_macros: Annotated[
        Optional[list[str]],
        Field(
            description="Universal macros that can be passed to webhook (e.g., {DEVICE_TYPE}, {COUNTRY})"
        ),
    ] = None
    required_macros: Annotated[
        Optional[list[str]],
        Field(
            description="Universal macros that must be provided for webhook to function"
        ),
    ] = None
    response_type: Annotated[
        ResponseType, Field(description="Expected content type of webhook response")
    ]
    security: Annotated[
        Security, Field(description="Security configuration for webhook calls")
    ]
