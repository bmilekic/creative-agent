# generated by datamodel-codegen:
#   filename:  _schemas_v1_core_package_json.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel


class GeoCountryAnyOfItem(RootModel[str]):
    root: Annotated[str, Field(pattern="^[A-Z]{2}$")]


class FrequencyCap(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    suppress_minutes: Annotated[
        float, Field(description="Minutes to suppress after impression", ge=0.0)
    ]


class TargetingOverlay(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    geo_country_any_of: Annotated[
        Optional[list[GeoCountryAnyOfItem]],
        Field(
            description="Restrict delivery to specific countries (ISO codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_region_any_of: Annotated[
        Optional[list[str]],
        Field(
            description="Restrict delivery to specific regions/states. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_metro_any_of: Annotated[
        Optional[list[str]],
        Field(
            description="Restrict delivery to specific metro areas (DMA codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_postal_code_any_of: Annotated[
        Optional[list[str]],
        Field(
            description="Restrict delivery to specific postal/ZIP codes. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    frequency_cap: Annotated[
        Optional[FrequencyCap],
        Field(
            description="Frequency capping settings for package-level application",
            title="Frequency Cap",
        ),
    ] = None


class CreativeAssignment(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    creative_id: Annotated[str, Field(description="Unique identifier for the creative")]
    weight: Annotated[
        Optional[float],
        Field(description="Delivery weight for this creative", ge=0.0, le=100.0),
    ] = None


class Status(Enum):
    draft = "draft"
    active = "active"
    paused = "paused"
    completed = "completed"


class Package(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    package_id: Annotated[
        str, Field(description="Publisher's unique identifier for the package")
    ]
    buyer_ref: Annotated[
        Optional[str],
        Field(description="Buyer's reference identifier for this package"),
    ] = None
    product_id: Annotated[
        Optional[str], Field(description="ID of the product this package is based on")
    ] = None
    budget: Annotated[
        Optional[float],
        Field(
            description="Budget allocation for this package in the currency specified by the pricing option",
            ge=0.0,
        ),
    ] = None
    impressions: Annotated[
        Optional[float], Field(description="Impression goal for this package", ge=0.0)
    ] = None
    targeting_overlay: Annotated[
        Optional[TargetingOverlay],
        Field(
            description="Optional geographic refinements for media buys. Most targeting should be expressed in the brief and handled by the publisher. These fields are primarily for geographic restrictions (RCT testing, regulatory compliance).",
            title="Targeting Overlay",
        ),
    ] = None
    creative_assignments: Annotated[
        Optional[list[CreativeAssignment]],
        Field(description="Creative assets assigned to this package"),
    ] = None
    formats_to_provide: Annotated[
        Optional[list[str]],
        Field(
            description="Format IDs that creative assets will be provided for this package"
        ),
    ] = None
    status: Annotated[
        Status, Field(description="Status of a package", title="Package Status")
    ]
