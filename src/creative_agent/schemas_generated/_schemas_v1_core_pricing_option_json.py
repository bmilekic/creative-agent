# generated by datamodel-codegen:
#   filename:  _schemas_v1_core_pricing-option_json.json

from __future__ import annotations

from typing import Annotated, Literal, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class PricingOption1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpm_usd_guaranteed')"
        ),
    ]
    pricing_model: Annotated[
        Literal["cpm"], Field(description="Cost per 1,000 impressions")
    ]
    rate: Annotated[
        float, Field(description="Fixed CPM rate (cost per 1,000 impressions)", ge=0.0)
    ]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class PriceGuidance(BaseModel):
    floor: Annotated[
        float,
        Field(
            description="Minimum bid price - publisher will reject bids under this value",
            ge=0.0,
        ),
    ]
    p25: Annotated[
        Optional[float], Field(description="25th percentile winning price", ge=0.0)
    ] = None
    p50: Annotated[
        Optional[float], Field(description="Median winning price", ge=0.0)
    ] = None
    p75: Annotated[
        Optional[float], Field(description="75th percentile winning price", ge=0.0)
    ] = None
    p90: Annotated[
        Optional[float], Field(description="90th percentile winning price", ge=0.0)
    ] = None


class PricingOption2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpm_usd_auction')"
        ),
    ]
    pricing_model: Annotated[
        Literal["cpm"], Field(description="Cost per 1,000 impressions")
    ]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    price_guidance: Annotated[
        PriceGuidance,
        Field(description="Pricing guidance for auction-based CPM bidding"),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class PricingOption3(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpc_usd_fixed')"
        ),
    ]
    pricing_model: Annotated[Literal["cpc"], Field(description="Cost per click")]
    rate: Annotated[float, Field(description="Fixed CPC rate (cost per click)", ge=0.0)]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class PricingOption4(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpcv_usd_guaranteed')"
        ),
    ]
    pricing_model: Annotated[
        Literal["cpcv"], Field(description="Cost per completed view (100% completion)")
    ]
    rate: Annotated[
        float, Field(description="Fixed CPCV rate (cost per 100% completion)", ge=0.0)
    ]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class ViewThreshold(RootModel[float]):
    root: Annotated[
        float,
        Field(
            description="Percentage completion threshold for CPV pricing (0.0 to 1.0, e.g., 0.5 = 50% completion)",
            ge=0.0,
            le=1.0,
        ),
    ]


class ViewThreshold1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    duration_seconds: Annotated[
        int,
        Field(
            description="Seconds of viewing required (e.g., 30 for YouTube-style '30 seconds = view')",
            ge=1,
        ),
    ]


class Parameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    view_threshold: Union[ViewThreshold, ViewThreshold1]


class PricingOption5(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpv_usd_50pct')"
        ),
    ]
    pricing_model: Annotated[
        Literal["cpv"], Field(description="Cost per view at threshold")
    ]
    rate: Annotated[float, Field(description="Fixed CPV rate (cost per view)", ge=0.0)]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    parameters: Annotated[
        Parameters,
        Field(description="CPV-specific parameters defining the view threshold"),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class Parameters1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    demographic: Annotated[
        str,
        Field(
            description="Target demographic in Nielsen format: P/M/W/A/C + age range. Examples: P18-49 (Persons 18-49), M25-54 (Men 25-54), W35+ (Women 35+), A18-34 (Adults 18-34), C2-11 (Children 2-11)",
            pattern="^[PMWAC][0-9]{2}(-[0-9]{2}|\\+)$",
        ),
    ]
    min_points: Annotated[
        Optional[float],
        Field(description="Minimum GRPs/TRPs required for this pricing option", ge=0.0),
    ] = None


class PricingOption6(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpp_usd_p18-49')"
        ),
    ]
    pricing_model: Annotated[
        Literal["cpp"], Field(description="Cost per Gross Rating Point")
    ]
    rate: Annotated[
        float, Field(description="Fixed CPP rate (cost per rating point)", ge=0.0)
    ]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    parameters: Annotated[
        Parameters1,
        Field(
            description="CPP-specific parameters for demographic targeting and GRP requirements"
        ),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class Parameters2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    duration_hours: Annotated[
        Optional[float],
        Field(
            description="Duration in hours for time-based flat rate pricing (DOOH)",
            ge=0.0,
        ),
    ] = None
    sov_percentage: Annotated[
        Optional[float],
        Field(
            description="Guaranteed share of voice as percentage (DOOH, 0-100)",
            ge=0.0,
            le=100.0,
        ),
    ] = None
    loop_duration_seconds: Annotated[
        Optional[int],
        Field(description="Duration of ad loop rotation in seconds (DOOH)", ge=1),
    ] = None
    min_plays_per_hour: Annotated[
        Optional[int],
        Field(
            description="Minimum number of times ad plays per hour (DOOH frequency guarantee)",
            ge=0,
        ),
    ] = None
    venue_package: Annotated[
        Optional[str],
        Field(
            description="Named venue package identifier for DOOH (e.g., 'times_square_network', 'airport_terminals')"
        ),
    ] = None
    estimated_impressions: Annotated[
        Optional[int],
        Field(
            description="Estimated impressions for this flat rate option (informational, commonly used with SOV or time-based DOOH)",
            ge=0,
        ),
    ] = None
    daypart: Annotated[
        Optional[str],
        Field(
            description="Specific daypart for time-based pricing (e.g., 'morning_commute', 'evening_prime', 'overnight')"
        ),
    ] = None


class PricingOption7(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'flat_rate_usd_24h_takeover')"
        ),
    ]
    pricing_model: Annotated[
        Literal["flat_rate"],
        Field(description="Fixed cost regardless of delivery volume"),
    ]
    rate: Annotated[float, Field(description="Flat rate cost", ge=0.0)]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    is_fixed: Annotated[
        Literal[True],
        Field(
            description="Whether this is a fixed rate (true) or auction-based (false)"
        ),
    ]
    parameters: Annotated[
        Optional[Parameters2],
        Field(description="Flat rate parameters for DOOH and time-based campaigns"),
    ] = None
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class PricingOption(
    RootModel[
        Union[
            PricingOption1,
            PricingOption2,
            PricingOption3,
            PricingOption4,
            PricingOption5,
            PricingOption6,
            PricingOption7,
        ]
    ]
):
    root: Annotated[
        Union[
            PricingOption1,
            PricingOption2,
            PricingOption3,
            PricingOption4,
            PricingOption5,
            PricingOption6,
            PricingOption7,
        ],
        Field(
            description="A pricing model option offered by a publisher for a product. Each pricing model has its own schema with model-specific requirements.",
            title="Pricing Option",
        ),
    ]
