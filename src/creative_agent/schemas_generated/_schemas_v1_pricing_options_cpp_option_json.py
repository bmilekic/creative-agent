# generated by datamodel-codegen:
#   filename:  _schemas_v1_pricing-options_cpp-option_json.json

from __future__ import annotations

from typing import Annotated, Literal, Optional

from pydantic import BaseModel, ConfigDict, Field


class Parameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    demographic: Annotated[
        str,
        Field(
            description="Target demographic in Nielsen format: P/M/W/A/C + age range. Examples: P18-49 (Persons 18-49), M25-54 (Men 25-54), W35+ (Women 35+), A18-34 (Adults 18-34), C2-11 (Children 2-11)",
            pattern="^[PMWAC][0-9]{2}(-[0-9]{2}|\\+)$",
        ),
    ]
    min_points: Annotated[
        Optional[float],
        Field(description="Minimum GRPs/TRPs required for this pricing option", ge=0.0),
    ] = None


class CppPricingOption(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpp_usd_p18-49')"
        ),
    ]
    pricing_model: Annotated[
        Literal["cpp"], Field(description="Cost per Gross Rating Point")
    ]
    rate: Annotated[
        float, Field(description="Fixed CPP rate (cost per rating point)", ge=0.0)
    ]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    parameters: Annotated[
        Parameters,
        Field(
            description="CPP-specific parameters for demographic targeting and GRP requirements"
        ),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None
