# generated by datamodel-codegen:
#   filename:  _schemas_v1_core_property_json.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel


class PropertyType(Enum):
    website = "website"
    mobile_app = "mobile_app"
    ctv_app = "ctv_app"
    dooh = "dooh"
    podcast = "podcast"
    radio = "radio"
    streaming_audio = "streaming_audio"


class Identifier(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Annotated[
        str,
        Field(
            description="Type of identifier (e.g., 'domain', 'bundle_id', 'roku_store_id', 'podcast_guid')"
        ),
    ]
    value: Annotated[
        str,
        Field(
            description="The identifier value. For domain type: 'example.com' matches www.example.com and m.example.com only; 'subdomain.example.com' matches that specific subdomain; '*.example.com' matches all subdomains"
        ),
    ]


class Tag(RootModel[str]):
    root: Annotated[
        str,
        Field(
            description="Lowercase tag with underscores (e.g., 'conde_nast_network', 'premium_content')",
            pattern="^[a-z0-9_]+$",
        ),
    ]


class Property(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    property_type: Annotated[
        PropertyType, Field(description="Type of advertising property")
    ]
    name: Annotated[str, Field(description="Human-readable property name")]
    identifiers: Annotated[
        list[Identifier],
        Field(description="Array of identifiers for this property", min_length=1),
    ]
    tags: Annotated[
        Optional[list[Tag]],
        Field(
            description="Tags for categorization and grouping (e.g., network membership, content categories)"
        ),
    ] = None
    publisher_domain: Annotated[
        str,
        Field(
            description="Domain where adagents.json should be checked for authorization validation"
        ),
    ]
