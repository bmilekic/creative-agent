# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_get-products-response_json.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Literal, Optional, Union

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, RootModel


class Status(Enum):
    submitted = "submitted"
    working = "working"
    input_required = "input-required"
    completed = "completed"
    canceled = "canceled"
    failed = "failed"
    rejected = "rejected"
    auth_required = "auth-required"
    unknown = "unknown"


class PropertyType(Enum):
    website = "website"
    mobile_app = "mobile_app"
    ctv_app = "ctv_app"
    dooh = "dooh"
    podcast = "podcast"
    radio = "radio"
    streaming_audio = "streaming_audio"


class Identifier(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Annotated[
        str,
        Field(
            description="Type of identifier (e.g., 'domain', 'bundle_id', 'roku_store_id', 'podcast_guid')"
        ),
    ]
    value: Annotated[
        str,
        Field(
            description="The identifier value. For domain type: 'example.com' matches www.example.com and m.example.com only; 'subdomain.example.com' matches that specific subdomain; '*.example.com' matches all subdomains"
        ),
    ]


class Tag(RootModel[str]):
    root: Annotated[
        str,
        Field(
            description="Lowercase tag with underscores (e.g., 'conde_nast_network', 'premium_content')",
            pattern="^[a-z0-9_]+$",
        ),
    ]


class Property(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    property_type: Annotated[
        PropertyType, Field(description="Type of advertising property")
    ]
    name: Annotated[str, Field(description="Human-readable property name")]
    identifiers: Annotated[
        list[Identifier],
        Field(description="Array of identifiers for this property", min_length=1),
    ]
    tags: Annotated[
        Optional[list[Tag]],
        Field(
            description="Tags for categorization and grouping (e.g., network membership, content categories)"
        ),
    ] = None
    publisher_domain: Annotated[
        str,
        Field(
            description="Domain where adagents.json should be checked for authorization validation"
        ),
    ]


class PropertyTag(RootModel[str]):
    root: Annotated[
        str,
        Field(
            description="Lowercase tag with underscores (e.g., 'local_radio', 'premium_content')",
            pattern="^[a-z0-9_]+$",
        ),
    ]


class DeliveryType(Enum):
    guaranteed = "guaranteed"
    non_guaranteed = "non_guaranteed"


class PricingOptions(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpm_usd_guaranteed')"
        ),
    ]
    pricing_model: Annotated[
        Literal["cpm"], Field(description="Cost per 1,000 impressions")
    ]
    rate: Annotated[
        float, Field(description="Fixed CPM rate (cost per 1,000 impressions)", ge=0.0)
    ]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class PriceGuidance(BaseModel):
    floor: Annotated[
        float,
        Field(
            description="Minimum bid price - publisher will reject bids under this value",
            ge=0.0,
        ),
    ]
    p25: Annotated[
        Optional[float], Field(description="25th percentile winning price", ge=0.0)
    ] = None
    p50: Annotated[
        Optional[float], Field(description="Median winning price", ge=0.0)
    ] = None
    p75: Annotated[
        Optional[float], Field(description="75th percentile winning price", ge=0.0)
    ] = None
    p90: Annotated[
        Optional[float], Field(description="90th percentile winning price", ge=0.0)
    ] = None


class PricingOptions15(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpm_usd_auction')"
        ),
    ]
    pricing_model: Annotated[
        Literal["cpm"], Field(description="Cost per 1,000 impressions")
    ]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    price_guidance: Annotated[
        PriceGuidance,
        Field(description="Pricing guidance for auction-based CPM bidding"),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class PricingOptions16(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpc_usd_fixed')"
        ),
    ]
    pricing_model: Annotated[Literal["cpc"], Field(description="Cost per click")]
    rate: Annotated[float, Field(description="Fixed CPC rate (cost per click)", ge=0.0)]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class PricingOptions17(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpcv_usd_guaranteed')"
        ),
    ]
    pricing_model: Annotated[
        Literal["cpcv"], Field(description="Cost per completed view (100% completion)")
    ]
    rate: Annotated[
        float, Field(description="Fixed CPCV rate (cost per 100% completion)", ge=0.0)
    ]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class ViewThreshold(RootModel[float]):
    root: Annotated[
        float,
        Field(
            description="Percentage completion threshold for CPV pricing (0.0 to 1.0, e.g., 0.5 = 50% completion)",
            ge=0.0,
            le=1.0,
        ),
    ]


class ViewThreshold7(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    duration_seconds: Annotated[
        int,
        Field(
            description="Seconds of viewing required (e.g., 30 for YouTube-style '30 seconds = view')",
            ge=1,
        ),
    ]


class Parameters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    view_threshold: Union[ViewThreshold, ViewThreshold7]


class PricingOptions18(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpv_usd_50pct')"
        ),
    ]
    pricing_model: Annotated[
        Literal["cpv"], Field(description="Cost per view at threshold")
    ]
    rate: Annotated[float, Field(description="Fixed CPV rate (cost per view)", ge=0.0)]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    parameters: Annotated[
        Parameters,
        Field(description="CPV-specific parameters defining the view threshold"),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class Parameters10(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    demographic: Annotated[
        str,
        Field(
            description="Target demographic in Nielsen format: P/M/W/A/C + age range. Examples: P18-49 (Persons 18-49), M25-54 (Men 25-54), W35+ (Women 35+), A18-34 (Adults 18-34), C2-11 (Children 2-11)",
            pattern="^[PMWAC][0-9]{2}(-[0-9]{2}|\\+)$",
        ),
    ]
    min_points: Annotated[
        Optional[float],
        Field(description="Minimum GRPs/TRPs required for this pricing option", ge=0.0),
    ] = None


class PricingOptions19(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpp_usd_p18-49')"
        ),
    ]
    pricing_model: Annotated[
        Literal["cpp"], Field(description="Cost per Gross Rating Point")
    ]
    rate: Annotated[
        float, Field(description="Fixed CPP rate (cost per rating point)", ge=0.0)
    ]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    parameters: Annotated[
        Parameters10,
        Field(
            description="CPP-specific parameters for demographic targeting and GRP requirements"
        ),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class Parameters11(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    duration_hours: Annotated[
        Optional[float],
        Field(
            description="Duration in hours for time-based flat rate pricing (DOOH)",
            ge=0.0,
        ),
    ] = None
    sov_percentage: Annotated[
        Optional[float],
        Field(
            description="Guaranteed share of voice as percentage (DOOH, 0-100)",
            ge=0.0,
            le=100.0,
        ),
    ] = None
    loop_duration_seconds: Annotated[
        Optional[int],
        Field(description="Duration of ad loop rotation in seconds (DOOH)", ge=1),
    ] = None
    min_plays_per_hour: Annotated[
        Optional[int],
        Field(
            description="Minimum number of times ad plays per hour (DOOH frequency guarantee)",
            ge=0,
        ),
    ] = None
    venue_package: Annotated[
        Optional[str],
        Field(
            description="Named venue package identifier for DOOH (e.g., 'times_square_network', 'airport_terminals')"
        ),
    ] = None
    estimated_impressions: Annotated[
        Optional[int],
        Field(
            description="Estimated impressions for this flat rate option (informational, commonly used with SOV or time-based DOOH)",
            ge=0,
        ),
    ] = None
    daypart: Annotated[
        Optional[str],
        Field(
            description="Specific daypart for time-based pricing (e.g., 'morning_commute', 'evening_prime', 'overnight')"
        ),
    ] = None


class PricingOptions20(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'flat_rate_usd_24h_takeover')"
        ),
    ]
    pricing_model: Annotated[
        Literal["flat_rate"],
        Field(description="Fixed cost regardless of delivery volume"),
    ]
    rate: Annotated[float, Field(description="Flat rate cost", ge=0.0)]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    is_fixed: Annotated[
        Literal[True],
        Field(
            description="Whether this is a fixed rate (true) or auction-based (false)"
        ),
    ]
    parameters: Annotated[
        Optional[Parameters11],
        Field(description="Flat rate parameters for DOOH and time-based campaigns"),
    ] = None
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class Measurement(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Annotated[
        str,
        Field(
            description="Type of measurement",
            examples=["incremental_sales_lift", "brand_lift", "foot_traffic"],
        ),
    ]
    attribution: Annotated[
        str,
        Field(
            description="Attribution methodology",
            examples=["deterministic_purchase", "probabilistic"],
        ),
    ]
    window: Annotated[
        Optional[str],
        Field(description="Attribution window", examples=["30_days", "7_days"]),
    ] = None
    reporting: Annotated[
        str,
        Field(
            description="Reporting frequency and format",
            examples=["weekly_dashboard", "real_time_api"],
        ),
    ]


class DeliveryMeasurement(BaseModel):
    provider: Annotated[
        str,
        Field(
            description="Measurement provider(s) used for this product (e.g., 'Google Ad Manager with IAS viewability', 'Nielsen DAR', 'Geopath for DOOH impressions')"
        ),
    ]
    notes: Annotated[
        Optional[str],
        Field(
            description="Additional details about measurement methodology in plain language (e.g., 'MRC-accredited viewability. 50% in-view for 1s display / 2s video', 'Panel-based demographic measurement updated monthly')"
        ),
    ] = None


class AvailableReportingFrequency(Enum):
    hourly = "hourly"
    daily = "daily"
    monthly = "monthly"


class AvailableMetric(Enum):
    impressions = "impressions"
    spend = "spend"
    clicks = "clicks"
    ctr = "ctr"
    video_completions = "video_completions"
    completion_rate = "completion_rate"
    conversions = "conversions"
    viewability = "viewability"
    engagement_rate = "engagement_rate"


class ReportingCapabilities(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    available_reporting_frequencies: Annotated[
        list[AvailableReportingFrequency],
        Field(description="Supported reporting frequency options", min_length=1),
    ]
    expected_delay_minutes: Annotated[
        int,
        Field(
            description="Expected delay in minutes before reporting data becomes available (e.g., 240 for 4-hour delay)",
            examples=[240, 300, 1440],
            ge=0,
        ),
    ]
    timezone: Annotated[
        str,
        Field(
            description="Timezone for reporting periods. Use 'UTC' or IANA timezone (e.g., 'America/New_York'). Critical for daily/monthly frequency alignment.",
            examples=[
                "UTC",
                "America/New_York",
                "Europe/London",
                "America/Los_Angeles",
            ],
        ),
    ]
    supports_webhooks: Annotated[
        bool,
        Field(
            description="Whether this product supports webhook-based reporting notifications"
        ),
    ]
    available_metrics: Annotated[
        list[AvailableMetric],
        Field(
            description="Metrics available in reporting. Impressions and spend are always implicitly included.",
            examples=[
                ["impressions", "spend", "clicks", "video_completions"],
                ["impressions", "spend", "conversions"],
            ],
        ),
    ]


class CoBranding(Enum):
    required = "required"
    optional = "optional"
    none = "none"


class LandingPage(Enum):
    any = "any"
    retailer_site_only = "retailer_site_only"
    must_include_retailer = "must_include_retailer"


class CreativePolicy(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    co_branding: Annotated[CoBranding, Field(description="Co-branding requirement")]
    landing_page: Annotated[LandingPage, Field(description="Landing page requirements")]
    templates_available: Annotated[
        bool, Field(description="Whether creative templates are provided")
    ]


class Products(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    product_id: Annotated[str, Field(description="Unique identifier for the product")]
    name: Annotated[str, Field(description="Human-readable product name")]
    description: Annotated[
        str, Field(description="Detailed description of the product and its inventory")
    ]
    properties: Annotated[
        list[Property],
        Field(
            description="Array of advertising properties covered by this product for adagents.json validation",
            min_length=1,
        ),
    ]
    property_tags: Annotated[
        Optional[list[PropertyTag]],
        Field(
            description="Tags identifying groups of properties covered by this product (use list_authorized_properties to get full property details)",
            min_length=1,
        ),
    ] = None
    format_ids: Annotated[
        list[str],
        Field(
            description="Array of supported creative format IDs - use list_creative_formats to get full format details"
        ),
    ]
    delivery_type: Annotated[
        DeliveryType,
        Field(description="Type of inventory delivery", title="Delivery Type"),
    ]
    pricing_options: Annotated[
        list[
            Union[
                PricingOptions,
                PricingOptions15,
                PricingOptions16,
                PricingOptions17,
                PricingOptions18,
                PricingOptions19,
                PricingOptions20,
            ]
        ],
        Field(description="Available pricing models for this product", min_length=1),
    ]
    estimated_exposures: Annotated[
        Optional[int],
        Field(
            description="Estimated exposures/impressions for guaranteed products", ge=0
        ),
    ] = None
    measurement: Annotated[
        Optional[Measurement],
        Field(
            description="Measurement capabilities included with a product",
            title="Measurement",
        ),
    ] = None
    delivery_measurement: Annotated[
        DeliveryMeasurement,
        Field(
            description="Measurement provider and methodology for delivery metrics. The buyer accepts the declared provider as the source of truth for the buy. REQUIRED for all products."
        ),
    ]
    reporting_capabilities: Annotated[
        Optional[ReportingCapabilities],
        Field(
            description="Reporting capabilities available for a product",
            title="Reporting Capabilities",
        ),
    ] = None
    creative_policy: Annotated[
        Optional[CreativePolicy],
        Field(
            description="Creative requirements and restrictions for a product",
            title="Creative Policy",
        ),
    ] = None
    is_custom: Annotated[
        Optional[bool], Field(description="Whether this is a custom product")
    ] = None
    brief_relevance: Annotated[
        Optional[str],
        Field(
            description="Explanation of why this product matches the brief (only included when brief is provided)"
        ),
    ] = None
    expires_at: Annotated[
        Optional[AwareDatetime],
        Field(description="Expiration timestamp for custom products"),
    ] = None


class Property3(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    property_type: Annotated[
        PropertyType, Field(description="Type of advertising property")
    ]
    name: Annotated[str, Field(description="Human-readable property name")]
    identifiers: Annotated[
        list[Identifier],
        Field(description="Array of identifiers for this property", min_length=1),
    ]
    tags: Annotated[
        Optional[list[Tag]],
        Field(
            description="Tags for categorization and grouping (e.g., network membership, content categories)"
        ),
    ] = None
    publisher_domain: Annotated[
        str,
        Field(
            description="Domain where adagents.json should be checked for authorization validation"
        ),
    ]


class PricingOptions21(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpm_usd_guaranteed')"
        ),
    ]
    pricing_model: Annotated[
        Literal["cpm"], Field(description="Cost per 1,000 impressions")
    ]
    rate: Annotated[
        float, Field(description="Fixed CPM rate (cost per 1,000 impressions)", ge=0.0)
    ]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class PricingOptions22(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpm_usd_auction')"
        ),
    ]
    pricing_model: Annotated[
        Literal["cpm"], Field(description="Cost per 1,000 impressions")
    ]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    price_guidance: Annotated[
        PriceGuidance,
        Field(description="Pricing guidance for auction-based CPM bidding"),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class PricingOptions23(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpc_usd_fixed')"
        ),
    ]
    pricing_model: Annotated[Literal["cpc"], Field(description="Cost per click")]
    rate: Annotated[float, Field(description="Fixed CPC rate (cost per click)", ge=0.0)]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class PricingOptions24(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpcv_usd_guaranteed')"
        ),
    ]
    pricing_model: Annotated[
        Literal["cpcv"], Field(description="Cost per completed view (100% completion)")
    ]
    rate: Annotated[
        float, Field(description="Fixed CPCV rate (cost per 100% completion)", ge=0.0)
    ]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class ViewThreshold8(RootModel[float]):
    root: Annotated[
        float,
        Field(
            description="Percentage completion threshold for CPV pricing (0.0 to 1.0, e.g., 0.5 = 50% completion)",
            ge=0.0,
            le=1.0,
        ),
    ]


class ViewThreshold9(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    duration_seconds: Annotated[
        int,
        Field(
            description="Seconds of viewing required (e.g., 30 for YouTube-style '30 seconds = view')",
            ge=1,
        ),
    ]


class Parameters12(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    view_threshold: Union[ViewThreshold8, ViewThreshold9]


class PricingOptions25(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpv_usd_50pct')"
        ),
    ]
    pricing_model: Annotated[
        Literal["cpv"], Field(description="Cost per view at threshold")
    ]
    rate: Annotated[float, Field(description="Fixed CPV rate (cost per view)", ge=0.0)]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    parameters: Annotated[
        Parameters12,
        Field(description="CPV-specific parameters defining the view threshold"),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class Parameters13(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    demographic: Annotated[
        str,
        Field(
            description="Target demographic in Nielsen format: P/M/W/A/C + age range. Examples: P18-49 (Persons 18-49), M25-54 (Men 25-54), W35+ (Women 35+), A18-34 (Adults 18-34), C2-11 (Children 2-11)",
            pattern="^[PMWAC][0-9]{2}(-[0-9]{2}|\\+)$",
        ),
    ]
    min_points: Annotated[
        Optional[float],
        Field(description="Minimum GRPs/TRPs required for this pricing option", ge=0.0),
    ] = None


class PricingOptions26(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'cpp_usd_p18-49')"
        ),
    ]
    pricing_model: Annotated[
        Literal["cpp"], Field(description="Cost per Gross Rating Point")
    ]
    rate: Annotated[
        float, Field(description="Fixed CPP rate (cost per rating point)", ge=0.0)
    ]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    parameters: Annotated[
        Parameters13,
        Field(
            description="CPP-specific parameters for demographic targeting and GRP requirements"
        ),
    ]
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class Parameters14(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    duration_hours: Annotated[
        Optional[float],
        Field(
            description="Duration in hours for time-based flat rate pricing (DOOH)",
            ge=0.0,
        ),
    ] = None
    sov_percentage: Annotated[
        Optional[float],
        Field(
            description="Guaranteed share of voice as percentage (DOOH, 0-100)",
            ge=0.0,
            le=100.0,
        ),
    ] = None
    loop_duration_seconds: Annotated[
        Optional[int],
        Field(description="Duration of ad loop rotation in seconds (DOOH)", ge=1),
    ] = None
    min_plays_per_hour: Annotated[
        Optional[int],
        Field(
            description="Minimum number of times ad plays per hour (DOOH frequency guarantee)",
            ge=0,
        ),
    ] = None
    venue_package: Annotated[
        Optional[str],
        Field(
            description="Named venue package identifier for DOOH (e.g., 'times_square_network', 'airport_terminals')"
        ),
    ] = None
    estimated_impressions: Annotated[
        Optional[int],
        Field(
            description="Estimated impressions for this flat rate option (informational, commonly used with SOV or time-based DOOH)",
            ge=0,
        ),
    ] = None
    daypart: Annotated[
        Optional[str],
        Field(
            description="Specific daypart for time-based pricing (e.g., 'morning_commute', 'evening_prime', 'overnight')"
        ),
    ] = None


class PricingOptions27(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pricing_option_id: Annotated[
        str,
        Field(
            description="Unique identifier for this pricing option within the product (e.g., 'flat_rate_usd_24h_takeover')"
        ),
    ]
    pricing_model: Annotated[
        Literal["flat_rate"],
        Field(description="Fixed cost regardless of delivery volume"),
    ]
    rate: Annotated[float, Field(description="Flat rate cost", ge=0.0)]
    currency: Annotated[
        str,
        Field(
            description="ISO 4217 currency code",
            examples=["USD", "EUR", "GBP", "JPY"],
            pattern="^[A-Z]{3}$",
        ),
    ]
    is_fixed: Annotated[
        Literal[True],
        Field(
            description="Whether this is a fixed rate (true) or auction-based (false)"
        ),
    ]
    parameters: Annotated[
        Optional[Parameters14],
        Field(description="Flat rate parameters for DOOH and time-based campaigns"),
    ] = None
    min_spend_per_package: Annotated[
        Optional[float],
        Field(
            description="Minimum spend requirement per package using this pricing option, in the specified currency",
            ge=0.0,
        ),
    ] = None


class ReportingCapabilities3(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    available_reporting_frequencies: Annotated[
        list[AvailableReportingFrequency],
        Field(description="Supported reporting frequency options", min_length=1),
    ]
    expected_delay_minutes: Annotated[
        int,
        Field(
            description="Expected delay in minutes before reporting data becomes available (e.g., 240 for 4-hour delay)",
            examples=[240, 300, 1440],
            ge=0,
        ),
    ]
    timezone: Annotated[
        str,
        Field(
            description="Timezone for reporting periods. Use 'UTC' or IANA timezone (e.g., 'America/New_York'). Critical for daily/monthly frequency alignment.",
            examples=[
                "UTC",
                "America/New_York",
                "Europe/London",
                "America/Los_Angeles",
            ],
        ),
    ]
    supports_webhooks: Annotated[
        bool,
        Field(
            description="Whether this product supports webhook-based reporting notifications"
        ),
    ]
    available_metrics: Annotated[
        list[AvailableMetric],
        Field(
            description="Metrics available in reporting. Impressions and spend are always implicitly included.",
            examples=[
                ["impressions", "spend", "clicks", "video_completions"],
                ["impressions", "spend", "conversions"],
            ],
        ),
    ]


class CreativePolicy4(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    co_branding: Annotated[CoBranding, Field(description="Co-branding requirement")]
    landing_page: Annotated[LandingPage, Field(description="Landing page requirements")]
    templates_available: Annotated[
        bool, Field(description="Whether creative templates are provided")
    ]


class Products1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    product_id: Annotated[str, Field(description="Unique identifier for the product")]
    name: Annotated[str, Field(description="Human-readable product name")]
    description: Annotated[
        str, Field(description="Detailed description of the product and its inventory")
    ]
    properties: Annotated[
        Optional[list[Property3]],
        Field(
            description="Array of advertising properties covered by this product for adagents.json validation",
            min_length=1,
        ),
    ] = None
    property_tags: Annotated[
        list[PropertyTag],
        Field(
            description="Tags identifying groups of properties covered by this product (use list_authorized_properties to get full property details)",
            min_length=1,
        ),
    ]
    format_ids: Annotated[
        list[str],
        Field(
            description="Array of supported creative format IDs - use list_creative_formats to get full format details"
        ),
    ]
    delivery_type: Annotated[
        DeliveryType,
        Field(description="Type of inventory delivery", title="Delivery Type"),
    ]
    pricing_options: Annotated[
        list[
            Union[
                PricingOptions21,
                PricingOptions22,
                PricingOptions23,
                PricingOptions24,
                PricingOptions25,
                PricingOptions26,
                PricingOptions27,
            ]
        ],
        Field(description="Available pricing models for this product", min_length=1),
    ]
    estimated_exposures: Annotated[
        Optional[int],
        Field(
            description="Estimated exposures/impressions for guaranteed products", ge=0
        ),
    ] = None
    measurement: Annotated[
        Optional[Measurement],
        Field(
            description="Measurement capabilities included with a product",
            title="Measurement",
        ),
    ] = None
    delivery_measurement: Annotated[
        DeliveryMeasurement,
        Field(
            description="Measurement provider and methodology for delivery metrics. The buyer accepts the declared provider as the source of truth for the buy. REQUIRED for all products."
        ),
    ]
    reporting_capabilities: Annotated[
        Optional[ReportingCapabilities3],
        Field(
            description="Reporting capabilities available for a product",
            title="Reporting Capabilities",
        ),
    ] = None
    creative_policy: Annotated[
        Optional[CreativePolicy4],
        Field(
            description="Creative requirements and restrictions for a product",
            title="Creative Policy",
        ),
    ] = None
    is_custom: Annotated[
        Optional[bool], Field(description="Whether this is a custom product")
    ] = None
    brief_relevance: Annotated[
        Optional[str],
        Field(
            description="Explanation of why this product matches the brief (only included when brief is provided)"
        ),
    ] = None
    expires_at: Annotated[
        Optional[AwareDatetime],
        Field(description="Expiration timestamp for custom products"),
    ] = None


class Error(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    code: Annotated[str, Field(description="Error code for programmatic handling")]
    message: Annotated[str, Field(description="Human-readable error message")]
    field: Annotated[
        Optional[str],
        Field(
            description="Field path associated with the error (e.g., 'packages[0].targeting')"
        ),
    ] = None
    suggestion: Annotated[
        Optional[str], Field(description="Suggested fix for the error")
    ] = None
    retry_after: Annotated[
        Optional[float],
        Field(description="Seconds to wait before retrying the operation", ge=0.0),
    ] = None
    details: Annotated[
        Optional[Any], Field(description="Additional task-specific error details")
    ] = None


class GetProductsResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    adcp_version: Annotated[
        str,
        Field(
            description="AdCP schema version used for this response",
            pattern="^\\d+\\.\\d+\\.\\d+$",
        ),
    ]
    status: Annotated[
        Optional[Status],
        Field(
            description="Standardized task status values based on A2A TaskState enum. Indicates the current state of any AdCP operation.",
            title="Task Status",
        ),
    ] = "completed"
    products: Annotated[
        list[Union[Products, Products1]],
        Field(description="Array of matching products"),
    ]
    errors: Annotated[
        Optional[list[Error]],
        Field(
            description="Task-specific errors and warnings (e.g., product filtering issues)"
        ),
    ] = None
