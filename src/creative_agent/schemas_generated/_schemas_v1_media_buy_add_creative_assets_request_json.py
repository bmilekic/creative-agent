# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_add-creative-assets-request_json.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Literal, Optional, Union

from pydantic import AnyUrl, BaseModel, ConfigDict, Field, RootModel


class FormatId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    agent_url: Annotated[
        AnyUrl,
        Field(
            description="URL of the agent that defines this format (e.g., 'https://creatives.adcontextprotocol.org' for standard formats, or 'https://publisher.com/.well-known/adcp/sales' for custom formats)"
        ),
    ]
    id: Annotated[
        str,
        Field(
            description="Format identifier within the agent's namespace (e.g., 'display_300x250', 'video_standard_30s')",
            pattern="^[a-zA-Z0-9_-]+$",
        ),
    ]


class Assets(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["image"]
    url: Annotated[AnyUrl, Field(description="URL to the image asset")]
    width: Annotated[
        Optional[int], Field(description="Image width in pixels", ge=1)
    ] = None
    height: Annotated[
        Optional[int], Field(description="Image height in pixels", ge=1)
    ] = None
    format: Annotated[
        Optional[str],
        Field(description="Image file format (jpg, png, gif, webp, etc.)"),
    ] = None
    alt_text: Annotated[
        Optional[str], Field(description="Alternative text for accessibility")
    ] = None


class Assets12(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["video"]
    url: Annotated[AnyUrl, Field(description="URL to the video asset")]
    width: Annotated[
        Optional[int], Field(description="Video width in pixels", ge=1)
    ] = None
    height: Annotated[
        Optional[int], Field(description="Video height in pixels", ge=1)
    ] = None
    duration_ms: Annotated[
        Optional[int], Field(description="Video duration in milliseconds", ge=0)
    ] = None
    format: Annotated[
        Optional[str], Field(description="Video file format (mp4, webm, mov, etc.)")
    ] = None
    bitrate_kbps: Annotated[
        Optional[int], Field(description="Video bitrate in kilobits per second", ge=1)
    ] = None


class Assets13(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["audio"]
    url: Annotated[AnyUrl, Field(description="URL to the audio asset")]
    duration_ms: Annotated[
        Optional[int], Field(description="Audio duration in milliseconds", ge=0)
    ] = None
    format: Annotated[
        Optional[str], Field(description="Audio file format (mp3, wav, aac, etc.)")
    ] = None
    bitrate_kbps: Annotated[
        Optional[int], Field(description="Audio bitrate in kilobits per second", ge=1)
    ] = None


class Assets14(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["text"]
    content: Annotated[str, Field(description="Text content")]
    max_length: Annotated[
        Optional[int], Field(description="Maximum character length constraint", ge=1)
    ] = None
    language: Annotated[
        Optional[str], Field(description="Language code (e.g., 'en', 'es', 'fr')")
    ] = None


class Assets15(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["html"]
    content: Annotated[str, Field(description="HTML content")]
    version: Annotated[
        Optional[str], Field(description="HTML version (e.g., 'HTML5')")
    ] = None


class Assets16(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["css"]
    content: Annotated[str, Field(description="CSS content")]
    media: Annotated[
        Optional[str],
        Field(description="CSS media query context (e.g., 'screen', 'print')"),
    ] = None


class ModuleType(Enum):
    esm = "esm"
    commonjs = "commonjs"
    script = "script"


class Assets17(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["javascript"]
    content: Annotated[str, Field(description="JavaScript content")]
    module_type: Annotated[
        Optional[ModuleType], Field(description="JavaScript module type")
    ] = None


class Colors(BaseModel):
    primary: Optional[str] = None
    secondary: Optional[str] = None
    accent: Optional[str] = None


class Assets18(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["promoted_offerings"]
    url: Annotated[
        Optional[AnyUrl],
        Field(
            description="URL of the advertiser's brand or offering (e.g., https://retailer.com)"
        ),
    ] = None
    colors: Annotated[Optional[Colors], Field(description="Brand colors")] = None
    fonts: Annotated[Optional[list[str]], Field(description="Brand fonts")] = None
    tone: Annotated[Optional[str], Field(description="Brand tone/voice")] = None


class Assets19(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["url"]
    url: Annotated[AnyUrl, Field(description="URL reference")]
    description: Annotated[
        Optional[str], Field(description="Description of what this URL points to")
    ] = None


class Input(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[
        str, Field(description="Human-readable name for this preview variant")
    ]
    macros: Annotated[
        Optional[dict[str, str]],
        Field(description="Macro values to apply for this preview"),
    ] = None
    context_description: Annotated[
        Optional[str],
        Field(
            description="Natural language description of the context for AI-generated content"
        ),
    ] = None


class Asset(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    creative_id: Annotated[str, Field(description="Unique identifier for the creative")]
    name: Annotated[str, Field(description="Human-readable creative name")]
    format_id: Annotated[
        FormatId,
        Field(
            description="Structured format identifier with agent URL and format name",
            title="Format ID",
        ),
    ]
    assets: Annotated[
        dict[
            str,
            Union[
                Assets,
                Assets12,
                Assets13,
                Assets14,
                Assets15,
                Assets16,
                Assets17,
                Assets18,
                Assets19,
            ],
        ],
        Field(description="Assets required by the format, keyed by asset_role"),
    ]
    inputs: Annotated[
        Optional[list[Input]],
        Field(
            description="Preview contexts for generative formats - defines what scenarios to generate previews for"
        ),
    ] = None
    tags: Annotated[
        Optional[list[str]],
        Field(description="User-defined tags for organization and searchability"),
    ] = None
    approved: Annotated[
        Optional[bool],
        Field(
            description="For generative creatives: set to true to approve and finalize, false to request regeneration with updated assets/message. Omit for non-generative creatives."
        ),
    ] = None


class AddCreativeAssetsRequest1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    media_buy_id: Annotated[
        str, Field(description="Publisher's ID of the media buy to add creatives to")
    ]
    buyer_ref: Annotated[
        Optional[str], Field(description="Buyer's reference for the media buy")
    ] = None
    assets: Annotated[
        list[Asset], Field(description="Array of creative assets to upload")
    ]


class Assets20(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["image"]
    url: Annotated[AnyUrl, Field(description="URL to the image asset")]
    width: Annotated[
        Optional[int], Field(description="Image width in pixels", ge=1)
    ] = None
    height: Annotated[
        Optional[int], Field(description="Image height in pixels", ge=1)
    ] = None
    format: Annotated[
        Optional[str],
        Field(description="Image file format (jpg, png, gif, webp, etc.)"),
    ] = None
    alt_text: Annotated[
        Optional[str], Field(description="Alternative text for accessibility")
    ] = None


class Assets21(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["video"]
    url: Annotated[AnyUrl, Field(description="URL to the video asset")]
    width: Annotated[
        Optional[int], Field(description="Video width in pixels", ge=1)
    ] = None
    height: Annotated[
        Optional[int], Field(description="Video height in pixels", ge=1)
    ] = None
    duration_ms: Annotated[
        Optional[int], Field(description="Video duration in milliseconds", ge=0)
    ] = None
    format: Annotated[
        Optional[str], Field(description="Video file format (mp4, webm, mov, etc.)")
    ] = None
    bitrate_kbps: Annotated[
        Optional[int], Field(description="Video bitrate in kilobits per second", ge=1)
    ] = None


class Assets22(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["audio"]
    url: Annotated[AnyUrl, Field(description="URL to the audio asset")]
    duration_ms: Annotated[
        Optional[int], Field(description="Audio duration in milliseconds", ge=0)
    ] = None
    format: Annotated[
        Optional[str], Field(description="Audio file format (mp3, wav, aac, etc.)")
    ] = None
    bitrate_kbps: Annotated[
        Optional[int], Field(description="Audio bitrate in kilobits per second", ge=1)
    ] = None


class Assets23(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["text"]
    content: Annotated[str, Field(description="Text content")]
    max_length: Annotated[
        Optional[int], Field(description="Maximum character length constraint", ge=1)
    ] = None
    language: Annotated[
        Optional[str], Field(description="Language code (e.g., 'en', 'es', 'fr')")
    ] = None


class Assets24(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["html"]
    content: Annotated[str, Field(description="HTML content")]
    version: Annotated[
        Optional[str], Field(description="HTML version (e.g., 'HTML5')")
    ] = None


class Assets25(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["css"]
    content: Annotated[str, Field(description="CSS content")]
    media: Annotated[
        Optional[str],
        Field(description="CSS media query context (e.g., 'screen', 'print')"),
    ] = None


class Assets26(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["javascript"]
    content: Annotated[str, Field(description="JavaScript content")]
    module_type: Annotated[
        Optional[ModuleType], Field(description="JavaScript module type")
    ] = None


class Assets27(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["promoted_offerings"]
    url: Annotated[
        Optional[AnyUrl],
        Field(
            description="URL of the advertiser's brand or offering (e.g., https://retailer.com)"
        ),
    ] = None
    colors: Annotated[Optional[Colors], Field(description="Brand colors")] = None
    fonts: Annotated[Optional[list[str]], Field(description="Brand fonts")] = None
    tone: Annotated[Optional[str], Field(description="Brand tone/voice")] = None


class Assets28(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["url"]
    url: Annotated[AnyUrl, Field(description="URL reference")]
    description: Annotated[
        Optional[str], Field(description="Description of what this URL points to")
    ] = None


class Asset6(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    creative_id: Annotated[str, Field(description="Unique identifier for the creative")]
    name: Annotated[str, Field(description="Human-readable creative name")]
    format_id: Annotated[
        FormatId,
        Field(
            description="Structured format identifier with agent URL and format name",
            title="Format ID",
        ),
    ]
    assets: Annotated[
        dict[
            str,
            Union[
                Assets20,
                Assets21,
                Assets22,
                Assets23,
                Assets24,
                Assets25,
                Assets26,
                Assets27,
                Assets28,
            ],
        ],
        Field(description="Assets required by the format, keyed by asset_role"),
    ]
    inputs: Annotated[
        Optional[list[Input]],
        Field(
            description="Preview contexts for generative formats - defines what scenarios to generate previews for"
        ),
    ] = None
    tags: Annotated[
        Optional[list[str]],
        Field(description="User-defined tags for organization and searchability"),
    ] = None
    approved: Annotated[
        Optional[bool],
        Field(
            description="For generative creatives: set to true to approve and finalize, false to request regeneration with updated assets/message. Omit for non-generative creatives."
        ),
    ] = None


class AddCreativeAssetsRequest2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    media_buy_id: Annotated[
        Optional[str],
        Field(description="Publisher's ID of the media buy to add creatives to"),
    ] = None
    buyer_ref: Annotated[str, Field(description="Buyer's reference for the media buy")]
    assets: Annotated[
        list[Asset6], Field(description="Array of creative assets to upload")
    ]


class AddCreativeAssetsRequest(
    RootModel[Union[AddCreativeAssetsRequest1, AddCreativeAssetsRequest2]]
):
    root: Annotated[
        Union[AddCreativeAssetsRequest1, AddCreativeAssetsRequest2],
        Field(
            description="Request parameters for uploading creative assets",
            title="Add Creative Assets Request",
        ),
    ]
